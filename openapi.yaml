openapi: 3.0.1
info:
  title: API Endpoints
  description: >
    Different API endpoints and their parameters have been described here.
  version: 2.1.2

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /api/ai/v2/web-extract:
    post:
      summary: Extract Text from a Web Page
      description: >
        This endpoint is used to extract text from a web page using AI. It can take into account all the features such as metadata, inline code, codeblocks, image & html references and other links as well.
      operationId: extractTextFromWebPageV2
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url_path:
                  type: string
                  description: The URL of the web page to be extracted.
                headline:
                  type: boolean
                  description: Whether to extract the headline of the web page.
                  default: true
                inline_code:
                  type: boolean
                  description: Whether to extract inline code from the web page.
                  default: true
                code_blocks:
                  type: boolean
                  description: Whether to extract code blocks from the web page.
                  default: true
                references:
                  type: boolean
                  description: >
                    Whether to extract references to images and other external links in the web page.
                  default: true
                tables:
                  type: boolean
                  description: Whether to extract tables from the web page.
                  default: true
            example:
              url_path: "https://www.worqhat.com"
              headline: true
              inline_code: true
              code_blocks: true
              references: true
              tables: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status indicating the success of the process.
                  processing_time:
                    type: integer
                    description: The amount of time in miliseconds it took to complete the request.
                  processing_id:
                    type: string
                    description: A unique identifier for the server process. This helps us track support requests and complaints.
                  processing_count:
                    type: integer
                    description: Usage statistics for the request. This is what is used for the billing.
                  data:
                    type: object
                    properties:
                      text_content:
                        type: string
                        description: The extracted text content.
                      tags:
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                              description: The name of the tag.
                            value:
                              type: string
                              description: The value associated with the tag.
                            data:
                             type: object
                             description: The extracted data from the web page.
                             properties:
                              content:
                               type: string
                               description: Extracted text content from the web page.
                              markdown:
                               type: string
                               description: Extracted text formatted in markdown.
                              linksOnPage:
                                type: array
                                items:
                                 type: string
                                description: List of links extracted from the web page.
                              metadata:
                                type: object
                                description: Additional metadata extracted from the web page.
              example:
                status: "success"
                processingTime: 888
                processingId: "4b139bfe-1f71-4345-b539-fa6c1700f166"
                processingCount: 12
                data:
                  content: "Extracted text from the web page..."
                  markdown: "# Extracted Title\nExtracted text from the web page..."
                  linksOnPage:
                    - "https://www.example.com/link1"
                    - "https://www.example.com/link2"
                  metadata:
                    author: "John Doe"
                    publish_date: "2023-01-01"

  /api/ai/v2/pdf-extract:
    post:
      summary: Extract Text from a PDF
      description: >
        This endpoint is used to extract text from a PDF using AI. Scanning simultaneously across all pages and with the capability to understand human handwriting, this endpoint can extract text from any PDF.
      operationId: extractTextFromPDFV2
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The PDF file to be extracted.
              required:
                - file
            example:
              file: "/path/to/pdf.pdf"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status indicating the success of the PDF Extraction Process
                  processing_time:
                    type: integer
                    description: The amount of time in miliseconds it took to complete the request.
                  processing_id:
                    type: string
                    description: A unique identifier for the server process. This helps us track support requests and complaints.
                  processing_count:
                    type: integer
                    description: Usage statistics for the request. This is what is used for the billing.
                  data:
                    type: string
                    description: The extracted text content.
              example:
                  status: "success"
                  data: "This is a sample text to be converted."
                  processing_time: 888
                  processing_id: "4b139bfe-1f71-4345-b539-fa6c1700f166"
                  processing_count: 12

  /api/ai/speech-text:
    post:
      summary: Convert Speech to Text using AI
      description: >
        This endpoint is used to convert speech to text using AI. It accepts a Form Data containing the audio file and returns the speech-to-text conversion results.
      operationId: speechToText
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                audio:
                  type: string
                  format: binary
                  description: The audio file to be sent as input. The audio file can be of any format.
              required:
                - audio
            example:
              audio: "/path/to/audio.mp3"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status indicating the success of the Audio Conversion Process.
                  data:
                    type: object
                    properties:
                      text:
                        type: string
                        description: The Extracted Text from the Audio.
                      speaker_labels:
                        type: array
                        items:
                          type: object
                          properties:
                            speaker:
                              type: string
                              description: The speaker label.
                            text:
                              type: string
                              description: The text associated with the speaker.
                  processing_time:
                    type: integer
                    description: The amount of time in miliseconds it took to complete the request.
                  processing_id:
                    type: string
                    description: A unique identifier for the server process. This helps us track support requests and complaints.
                  processing_count:
                    type: integer
                    description: Usage statistics for the request. This is what is used for the billing.
              example:
                status: "success"
                data:
                  text: "This is a sample text to be converted to speech."
                  speaker_labels:
                    - speaker: "A"
                      text: "This is a sample text to be converted to speech."
                processing_time: 888
                processing_id: "4b139bfe-1f71-4345-b539-fa6c1700f166"
                processing_count: 12
  /api/ai/moderation:
    post:
      summary: Moderate Text Content using AI
      description: >
        This endpoint is used to moderate text content using AI.
        It accepts a JSON object containing the text moderation parameters and returns moderation results.
      operationId: moderateText
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text_content:
                  type: string
                  description: The text to be moderated.
            example:
              text_content: "This is a sample text to be moderated."
      responses:
        '200':
          description: Text moderated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status indicating the success of the text moderation.
                  moderation:
                    type: object
                    properties:
                      sexual:
                        type: string
                      hate:
                        type: string
                      harassment:
                        type: string
                      self-harm:
                        type: string
                      sexual/minors:
                        type: string
                      hate/threatening:
                        type: string
                      violence/graphic:
                        type: string
                      self-harm/intent:
                        type: string
                      self-harm/instructions:
                        type: string
                      harassment/threatening:
                        type: string
                      violence:
                        type: string
                    description: The moderation results.
                  processing_time:
                    type: integer
                    description: The amount of time in miliseconds it took to complete the request.
                  processing_id:
                    type: string
                    description: A unique identifier for the server process. This helps us track support requests and complaints.
                  processing_count:
                    type: integer
                    description: Usage statistics for the request. This is what is used for the billing.
                example:
                  status: "success"
                  moderation:
                    sexual: "0.016973"
                    hate: "0.001243"
                    harassment: "0.012784"
                    self-harm: "0.000040"
                    sexual/minors: "0.000049"
                    hate/threatening: "0.000002"
                    violence/graphic: "0.000016"
                    self-harm/intent: "0.000059"
                    self-harm/instructions: "0.000007"
                    harassment/threatening: "0.000002"
                    violence: "0.000333"
                  processing_time: 888
                  processing_id: "4b139bfe-1f71-4345-b539-fa6c1700f166"
                  processing_count: 3
  /api/ai/images/v2/image-moderation:
    post:
      summary: Moderate an Image using AI
      description: >
        This endpoint is used to moderate an image using AI.
        It accepts a Form Data containing the image and returns the moderation results.
      operationId: moderateImageV2
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: The image to be sent as input.
            example:
              image: "/path/to/image.jpg"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - processingTime
                  - processingId
                  - processingCount
                properties:
                  data:
                    type: array
                    minItems: 1
                    items:
                      type: object
                      required:
                        - Confidence
                        - Name
                        - ParentName
                        - TaxonomyLevel
                      properties:
                        Confidence:
                          type: number
                        Name:
                          type: string
                        ParentName:
                          type: string
                        TaxonomyLevel:
                          type: integer
                  processingTime:
                    type: number
                    description: The amount of time in miliseconds it took to complete the request.
                  processingId:
                    type: string
                    description: A unique identifier for the server process. This helps us track support requests and complaints.
                  processingCount:
                    type: integer
                    description: Usage statistics for the request. This is what is used for the billing.
                example:
                  summary: Example response with moderation data
                  value:
                    data:
                     - Confidence: 85.734561
                       Name: Explicit Nudity
                       ParentName: Adult Content
                       TaxonomyLevel: 3
                    processingTime: 888
                    processingId: "4b139bfe-1f71-4345-b539-fa6c1700f166"
                    processingCount: 3
  /api/ai/train-data:
    post:
      summary: Train AI Model
      description: >
        This endpoint allows users to train custom AI models for search and content processing. Users can upload files, specify model parameters, and initiate training for different model versions.
      operationId: trainAIModel
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: string
                  format: binary
                  description: The file to be used for training the model.
                type:
                  type: string
                  enum: [search, content]
                  description: The type of model training.
                modelType:
                  type: string
                  enum: [v2, v3]
                  description: The version of the model to be trained.
                name:
                  type: string
                  description: The name of the model to identify it later.
                modelId:
                  type: string
                  description: Custom model ID for retraining an existing model.
              required:
                - files
                - type
                - modelType
                - name
            example:
              files: "/path/to/Pitch Deck July 2024.pdf"
              type: "search"
              modelType: "v3"
              name: "Some name"
              modelId: "sample id"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status indicating the success of the model training.
                  processing_time:
                    type: integer
                    description: The amount of time in miliseconds it took to complete the request.
                  processing_id:
                    type: string
                    description: A unique identifier for the server process. This helps us track support requests and complaints.
                  processing_count:
                    type: integer
                    description: Usage statistics for the request. This is what is used for the billing.
                  data:
                    type: string
                    description: Model training results.
              example:
                status: "success"
                processing_time: 888
                processing_id: "4b139bfe-1f71-4345-b539-fa6c1700f166"
                processing_count: 3
                data: "The AI model training process has been successfully initiated."
