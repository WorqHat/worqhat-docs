openapi: 3.0.1
info:
  title: WorqHat AI API Endpoints
  description: >
    This API provides access to various AI services offered by WorqHat.
    It includes endpoints for user authentication, Databases and AI access.
    Users can authenticate themselves, access AI services, and manage their databases.
  version: 2.1.2
  termsOfService: "https://www.worqhat.com/terms-of-service"
  contact:
    name: WorqHat Support
    email: support@worqhat.com
    url: https://www.worqhat.com/contact-us
  license:
    name: Apache 2.0
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"
externalDocs:
  description: "Read more at https://docs.worqhat.com"
  url: "https://docs.worqhat.com"
tags:
  - name: Authentication
    description: Endpoints for user authentication, including login, logout, and password reset.
  - name: AI Services
    description: Endpoints for accessing various AI services, such as image recognition, natural language processing, and machine learning models.
  - name: AI Dataset Management
    description: Endpoints for managing custom trained AI models.
  - name: Database Management
    description: Endpoints for managing user data, including CRUD operations on user-specific databases and data retrieval.

servers:
  - url: https://api.worqhat.com
    description: Production server for WorqHat AI API
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error400Response:
      type: object
      properties:
        status:
          type: string
          description: Status code indicating the error.
        message:
          type: string
          description: A message describing the error.
        processing_id:
          type: string
          description: A universally unique identifier for the request.
        processing_time:
          type: number
          description: The time taken to process the request.
      example:
        status: "400"
        message: "Bad Request"
        processing_id: "123e4567-e89b-12d3-a456-426614174000"
        processing_time: 343

    Error500Response:
      type: object
      properties:
        status:
          type: string
          description: Status code indicating the error.
        message:
          type: string
          description: A message describing the error.
        processing_id:
          type: string
          description: A universally unique identifier for the request.
        processing_time:
          type: number
          description: The time taken to process the request.
      example:
        status: "500"
        message: "Internal Server Error"
        processing_id: "123e4567-e89b-12d3-a456-426614174001"
        processing_time: 500
paths:
  /api/ai/content/v4:
    post:
      summary: Text Generation V4 
      description: >
        WorqHat AiCon V4 API allows you to generate text using only text input.
      operationId: TextOnlyConversational
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                question:
                  type: string
                  description: The message or question you want to pass to the model.
                model:
                  type: enum
                  description: ID of the model to use. See the model endpoint compatibility table for details on which models work and are currently supported.
                  enum:
                    - aicon-v4-nano-160824
                    - aicon-v4-large-160824
                    - aicon-v4-alpha-160824
                randomness:
                  type: number
                  description: >
                    What model prediction randomness to use, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
                  default: 0.5
                stream_data:
                  type: boolean
                  description: >
                    If set, partial message deltas will be sent as data-only server-sent events, with the stream terminated by a data [DONE] message.
                  default: false
                training_data:
                  type: string
                  description: >
                    You can pass any sort of training data or system messages that you want the model to follow when answering your questions.
                  default: You are alex and you are one of the best Tour Guides. answer everything while starting with your name.
                response_type:
                  type: string
                  description: >
                    Specifies the format that the model must output.
                  default: text
                conversation_id:
                  type: string
                  description: >
                    Used as per requirement.
                  default: conv_1724236791746
                preserve_history:
                  type: boolean
                  description: >
                    Set to true to maintain conversation history.
                  default: true
                conversation_history:
                  type: array
                  items:
                    type: object
                    properties:
                      question:
                        type: string
                      answer:
                        type: string
                  default: [ "What is the capital of India?: New Delhi",
                            "What is the capital of USA?: Washington DC"]
              required:
                - question
                - model

            example:
              question: "hiii there"
              model: "aicon-v4-nano-160824"
              randomness: 0.5
              stream_data: false
              training_data: "You are alex and you are one of the best Tour Guides. answer everything while starting with your name"
              response_type: "text"
              conversation_id: "conv_1724236791746"
              preserve_history: true
              conversation_history:
                - "What is the capital of India?: New Delhi"
                - "What is the capital of USA?: Washington DC"
          multipart/form-data:
            schema:
              type: object
              properties:
                question:
                  type: string
                  description: The message or question you want to pass to the model.
                model:
                  type: string
                  description: ID of the model to use. See the model endpoint compatibility table for details on which models work and are currently supported.
                  enum:
                    - con-v4-nano-160824
                    - aicon-v4-large-160824
                    - aicon-v4-alpha-160824
                files:
                  type: array
                  items:
                    type: string
                  description: Files that you want to upload. You can send Images, Videos, PDFs, and Audio files. It has to be sent as an array.
                  default: ["file:///Users/sagnikghosh/Downloads/udGHXFe1zAfB3k31dbwYLdfAc2Y2.png","file:///Users/sagnikghosh/Downloads/udGHXFe1zAfB3k31dbwYLdfAc2Y2.png"]
                stream_data:
                  type: string
                  enum:
                    - "true"
                    - "false"
                  default: false
                training_data:
                  type: string
                  description: If set, partial message deltas will be sent, to reduce the waiting time. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a `data:` [DONE] message.
                  default: Explain customer service queries. 
                response_type:
                  type: string
                  description: An object specifying the format that the model must output. Compatible with all AiCon V4 models.Setting to { `"response_type":` `"json"` } will enable the model to send back structured outputs which ensures the model will match your supplied JSON schema in the message. `Important:` when using JSON mode, you must also instruct the model to produce JSON yourself via the training_data or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly `"stuck"` request. Also note that the message content may be partially cut off if finish_reason=`"DONE"`, which indicates the generation exceeded maximum tokens or the conversation exceeded the max context length and you will be billed for the whitespace.
                  default: json
                conversation_id:
                  type: string
                  description: Every interaction with the Language Model is associated with a Conversation Id. To let the model maintain a history of your conversations by default, you can pass the conversation id. You can define a conversation id on your own or you can just use the conversation id that is returned as a response in the first conversation itself. Since you will be dealing with files here, we don't allow you to pass a conversation history on your own.
                  default: conv_1724236791746
              required:
                - question
                - model
            example:
              question: "Can you explain this image?"
              model: "aicon-v4-nano-160824"
              files: ["file1.png", "file2.pdf"]
              stream_data: "false"
              response_type: "json"
              conversation_id: "conv_1724236791746"
              training_data: "Explain customer service queries."
      responses:
        "200":
          description: Text generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: string
                    description: The response output of the processing.
                  processing_time:
                    type: number
                    description: The amount of time in miliseconds it took to complete the request.
                  processing_id:
                    type: string
                    description: A unique identifier for the server process. This helps us track support requests and complaints.
                  processing_count:
                    type: integer
                    description: Usage statistics for the request. This is what is used for the billing.
                  conversation_id:
                    type: string
                    description: A unique identifier for the Message. You can use this conversation id later when building multiturn chat applications. This conversation id is what keeps a track of your past conversation. You can use this to keep continuing your requests one after the other without the hassle of maintaining the conversation history on your own.
                  model:
                    type: string
                    description: The model used for the process.
              example:
                Text Output:
                  value:
                    content: "Hi there!  My name is Alex, and I'm happy to help you with anything you need for your tour.  What can I do for you today?"
                    processingTime: 3105.397454
                    processingId: "8aa97481-20f9-48f4-a12d-d02eb6c1d62a"
                    processing_count: 84
                    conversation_id: "conv_1724236791746"
                    model: "aicon-v4-nano-160824"
                JSON Structured Output:
                  value:
                    content: '{"response": "Hi there!  My name is Alex, and I''m delighted to assist you with your travel needs. What can I help you with today"}'
                    processingTime: 2946.176112
                    processingId: "5944ab45-8bd7-4151-853d-da6cf315d617"
                    processing_count: 90
                    conversation_id: "conv_1724237541817"
                    model: "aicon-v4-nano-160824"
                Streaming Data:
                  value:
                    data:
                      - content: "Hi"
                        model: "aicon-v4-nano-160824"
                        timestamp: 1724240278523
                        processing_id: "bc4cc3b9-d000-4866-83ad-ad71abf10c8f"
                        conversation_id: "conv_1724240276193"
                      - content: " there! My name is Alex, and I'm excited to be your tour"
                        model: "aicon-v4-nano-160824"
                        timestamp: 1724240278630
                        processing_id: "bc4cc3b9-d000-4866-83ad-ad71abf10c8f"
                        conversation_id: "conv_1724240276193"
                      - content: " guide today. What can I help you with? \n"
                        model: "aicon-v4-nano-160824"
                        timestamp: 1724240278708
                        processing_id: "bc4cc3b9-d000-4866-83ad-ad71abf10c8f"
                        conversation_id: "conv_1724240276193"
                      - content: ""
                        model: "aicon-v4-nano-160824"
                        timestamp: 1724240278712
                        processing_id: "bc4cc3b9-d000-4866-83ad-ad71abf10c8f"
                        conversation_id: "conv_1724240276193"
                      - content: ""
                        model: "aicon-v4-nano-160824"
                        finishReason: "stop"
                        timestamp: 1724240278716
                        processing_id: "bc4cc3b9-d000-4866-83ad-ad71abf10c8f"
                        conversation_id: "conv_1724240276193"
                        wordCount: 77
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400Response"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error500Response"
  /api/ai/content/v4/{modelType}/{modelId}:
    post:
      summary: Finetuned Models
      description: WorqHat AiCon V4 Custom Model API allows you to generate text using only text input.
      operationId: FinetunedModels
      tags:
        - AI Services
      security:
        - bearerAuth: []
      parameters:
        - name: modelType
          in: path
          required: true
          description: The type of the base model that you have used to train the data.
          schema:
            type: string
            enum:
              - nano
              - large
            default: nano
        - name: modelId
          in: path
          required: true
          description: The unique ID of the custom model that has been created.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                question:
                  type: string
                  description: The message or question you want to pass to the model.
                model:
                  type: string
                  description: ID of the model to use. See the model endpoint compatibility table for details.
                randomness:
                  type: number
                  description: >
                    What model prediction randomness to use, between 0 and 1. Higher values (e.g., 0.8) make 
                    the output more random, while lower values (e.g., 0.2) make it more deterministic.
                  minimum: 0
                  maximum: 1
                stream_data:
                  type: boolean
                  description: >
                    If set to `true`, partial message deltas will be sent to reduce waiting time.
                    Tokens will be streamed as data-only server-sent events, terminating with `[DONE]`.
                training_data:
                  type: string
                  description:
                    Allows passing system messages or training data to influence model responses.
                    Supports up to 750K fixed context window without limitations on input.
                response_type:
                  type: string
                  description: >
                    Specifies the output format. Setting `response_type: json` ensures the model
                    adheres to JSON format. Without proper instruction in `training_data`, the model 
                    may generate an unending whitespace stream.
                conversation_id:
                  type: string
                  description:
                    A unique identifier for each conversation. If omitted, the model generates one.
                    Recommended to use the conversation ID returned in the first response.
                  default: conv_1724236791746           
                preserve_history:
                  type: boolean
                  description: >
                    Enables manually maintaining conversation history instead of using `conversation_id`.
                conversation_history:
                  type: array
                  description: Manually maintain past conversation records.
                  items:
                    type: object
                    properties:
                      Input Prompt 1:
                        type: string
                        description: Model Output 1
                      Input Prompt 2:
                        type: string
                        description: Model Output 2
              required:
                - question
                - model
                - randomness
                - stream_data
                - training_data
                - response_type
                - preserve_history
                - conversation_history
            example:
              training_data: >
                You will be provided with customer service queries. Classify each query into a 
                primary and secondary category. Provide JSON output with keys: `primary` and `secondary`.
              response_type: "json"
              question: "How do I reset my password?"
              conversation_id: "conv_1724236791746"
              preserve_history: false
              conversation_history:
                - user_prompt: "I need help with my bill."
                  model_response: "Sure! Can you clarify what specific issue you're facing?"
          multipart/form-data:
            schema:
              type: object
              properties:
                question:
                  type: string
                  description: The message or question you want to pass to the model.
                stream_data:
                  type: string
                  description: >
                    If set to `true`, partial message deltas will be sent to reduce waiting time.
                    Tokens will be streamed as data-only server-sent events, terminating with `[DONE]`.
                  enum:
                    - "true"
                    - "false"
                  default: false
                training_data:
                  type: string
                  description: Having a 750K fixed context window and with no limitations on the input, you can pass any sort of training data ir system messages that you want the model to follow when answering to your questions.
                default: Explain customer service queries.
                files:
                  type: array
                  items:
                    type: string
                  description: Files that you want to upload. You can send Images, Videos, PDFs, and Audio files. It has to be sent as an array.
                  minItems: 50
                  default: ["file:///Users/sagnikghosh/Downloads/udGHXFe1zAfB3k31dbwYLdfAc2Y2.png","file:///Users/sagnikghosh/Downloads/udGHXFe1zAfB3k31dbwYLdfAc2Y2.png"]
                response_type:
                  type: string
                  description: >
                    An object specifying the format that the model must output. Compatible with all AiCon V4 models.Setting to { "response_type": "json" } will enable the model to send back structured outputs which ensures the model will match your supplied JSON schema in the message. Important: when using JSON mode, you must also instruct the model to produce JSON yourself via the training_data or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="DONE", which indicates the generation exceeded maximum tokens or the conversation exceeded the max context length and you will be billed for the whitespace.
                  enum:
                    - text
                    - json
                  default: json
                conversation_id:
                  type: string
                  description: >
                    Every interaction with the Language Model is associated with a Conversation Id. To let the model maintain a history of your conversations by default, you can pass the conversation id. You can define a conversation id on your own or you can just use the conversation id that is returned as a response in the first conversation itself. Since you will be dealing with files here, we don't allow you to pass a conversation history on your own.
                  default: conv_1724236791746
              required:
                - question
            example:
              training_data: >
                You will be provided with customer service queries. Classify each query into a
                primary and secondary category. Provide JSON output with keys: `primary` and `secondary`.
              response_type: "json"
              question: "How do I reset my password?"
              conversation_id: "conv_1724236791746"
              preserve_history: false
              conversation_history:
                - user_prompt: "I need help with my bill."
                  model_response: "Sure! Can you clarify what specific issue you're facing?"
      responses:
        "200":
          description: Text Generated Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: string
                    description: The generated response text.
                  processing_count:
                    type: integer
                    description: Usage count for billing.
                  processing_time:
                    type: number
                    description: Time taken (in milliseconds) to process the request.
                  processing_id:
                    type: string
                    description: Unique identifier for the process (for tracking support requests).
                  conversation_id:
                    type: string
                    description: The conversation ID for multi-turn chat applications.
                  model:
                    type: string
                    description: The model used for processing.
              example:
                Text Output:
                  value:
                    content: "Hi there!  My name is Alex, and I'm happy to help you with anything you need for your tour.  What can I do for you today?"
                    processingTime: 3105.397454
                    processingId: "8aa97481-20f9-48f4-a12d-d02eb6c1d62a"
                    processingCount: 84
                    conversation_id: "conv_1724236791746"
                    model: "aicon-v4-alpha-160824"
                JSON Structured Output:
                  value:
                    content:
                      {
                        "response": "Hi there!  My name is Alex, and I'm delighted to assist you with your travel needs. What can I help you with today?",
                      }
                    processingTime: 2946.176112
                    processingId: "5944ab45-8bd7-4151-853d-da6cf315d617"
                    processingCount: 90
                    conversation_id: "conv_1724237541817"
                    model: "aicon-v4-alpha-160824"
                Streaming Data:
                  value:
                    data:
                      - content: "Hi"
                        model: "aicon-v4-alpha-160824"
                        timestamp: 1724240278523
                        processing_id: "bc4cc3b9-d000-4866-83ad-ad71abf10c8f"
                        conversation_id: "conv_1724240276193"
                      - content: " there! My name is Alex, and I'm excited to be your tour"
                        model: "aicon-v4-alpha-160824"
                        timestamp: 1724240278630
                        processing_id: "bc4cc3b9-d000-4866-83ad-ad71abf10c8f"
                        conversation_id: "conv_1724240276193"
                      - content: " guide today. What can I help you with? \n"
                        model: "aicon-v4-alpha-160824"
                        timestamp: 1724240278708
                        processing_id: "bc4cc3b9-d000-4866-83ad-ad71abf10c8f"
                        conversation_id: "conv_1724240276193"
                      - content: ""
                        model: "aicon-v4-alpha-160824"
                        timestamp: 1724240278712
                        processing_id: "bc4cc3b9-d000-4866-83ad-ad71abf10c8f"
                        conversation_id: "conv_1724240276193"
                      - content: ""
                        model: "aicon-v4-alpha-160824"
                        finishReason: "stop"
                        timestamp: 1724240278716
                        processing_id: "bc4cc3b9-d000-4866-83ad-ad71abf10c8f"
                        conversation_id: "conv_1724240276193"
                        wordCount: 77
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400Response"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error500Response"
  /api/ai/search/v3/{modelId}:
    post:
      summary: Search V3
      description: Meaning and Context Based Search experience and Recommendations powered by AI
      operationId: SearchV3
      tags:
        - AI Services
      security:
        - bearerAuth: []
      parameters:
        - name: modelId
          in: path
          required: true
          description: The Custom Trained Model ID. You can get this Model ID from your Model Training Dashboard.
          example: 8fa1b230-917b-4d83-8d56-4760b3537e71
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                question:
                  type: string
                  description: The question you want to ask.
                search_count:
                  type: integer
                  description: The number of respoonses you want in output
                default: 123
              required:
                - question
      responses:
        "200":
          description: Text Generated Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        source:
                          type: string
                        content:
                          type: string
                        page:
                          type: integer
                  processing_time:
                    type: number
                  processing_id:
                    type: string
              example:
                data:
                  - source: "string"
                    content: "string"
                    page: 0
                processingTime: 0
                processingId: "string"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400Response"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error500Response"
  /api/ai/images/generate/v2:
    post:
      summary: Image Generation V2
      description: >
        AI model of version 2 has been used to create images. It is the fastest and basic model to create images.
      operationId: generateImageV2
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                prompt:
                  type: array
                  description: Prompt is used for generating images.
                  items:
                    type: string
                image_style:
                  type: string
                  description: The style of the image to be generated.
                  example: "realistic"
                orientation:
                  type: string
                  description: The orientation of the image.
                  enum:
                    - square
                    - portrait
                    - landscape
                  default: Square
                output_type:
                  type: string
                  description: >
                    The format of the generated image. 
                    'url' returns a direct image link, and 'Base64' returns an encoded string.
                  enum:
                    - url
                    - Base64
                  default: url
              required:
                - prompt
                - image_style
            example:
              prompt: ["A cat floating on the clouds"]
              image_style: "realistic"
              output_type: "url"
              orientation: "square"

      responses:
        "200":
          description: Image generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image.
                  processing_time:
                    type: integer
                    description: The time taken to process the request (in milliseconds).
                  processing_id:
                    type: string
                    description: Unique request identifier for tracking.
                required:
                  - image
                  - processing_time
                  - processing_id
              example:
                image: "https://storage.googleapis.com/example-image-url"
                processing_time: 15938
                processing_id: "1e01b632-2d8f-4f71-8a27-36e219d67be5"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400Response"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error500Response"

  /api/ai/images/generate/v3:
    post:
      summary: Image Generation V3
      description: >
        This endpoint is used to generate an image using AI model V3.
        It accepts a JSON object containing the image generation parameters and returns the generated image.
      operationId: generateImageV3
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                prompt:
                  type: array
                  description: Prompt is used for generating images.
                  items:
                    type: string
                image_style:
                  type: string
                  description: The style of the image to be generated.
                  example: "Anime"
                orientation:
                  type: string
                  description: The orientation of the image.
                  enum:
                    - square
                    - portrait
                    - landscape
                  default: Square
                output_type:
                  type: string
                  description: >
                    The format of the generated image. 
                    'url' returns a direct image link, and 'Base64' returns an encoded string.
                  enum:
                    - url
                    - Base64
                  default: url 
              required:
                - prompt
                - image_style
            example:
              prompt: ["A cat floating on the clouds"]
              image_style: "Anime"
              orientation: "square"
              output_type: "url"

      responses:
        "200":
          description: Image generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image URL.
                  processing_time:
                    type: integer
                    description: The time taken to process the request (in milliseconds).
                  processing_id:
                    type: string
                    description: Unique request identifier for tracking.
                required:
                  - image
                  - processing_time
                  - processing_id
              example:
                image: "https://storage.googleapis.com/example-image-url"
                processing_time: 15938
                processing_id: "1e01b632-2d8f-4f71-8a27-36e219d67be5"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400Response"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error500Response"

  /api/ai/images/modify/v3:
    post:
      summary: Image-to-Image
      description: >
        The model is particularly well-tuned for vibrant and accurate colors, with better contrast, lighting, and shadows than its predecessor, all in native 1024x1024 resolution. This removes the need for an additional Upscaling Process after creating an image.
      operationId: imagetoimage
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                existing_image:
                  type: string
                  format: binary
                  description: The existing image to be modified.
                similarity:
                  type: number
                  description: The percentage similarity to maintain with the original image.
                modification:
                  type: string
                  description: The textual description of how the image should be modified.
                output_type:
                  type: string
                  description: The output type of the image to be generated.
                  enum:
                    - url
                    - Base64
                control_function:
                  type: string
                  description: The control function for image modification.
                  enum:
                    - none
                    - structure_transfer
                    - style_transfer
                  default: none
              required:
                - existing_image
                - similarity
                - modification
                - output_type

            example:
              similarity: 40
              modification: "Change this into a night scenery"
              output_type: "url"
              control_function: "none"

      responses:
        "200":
          description: Image modified successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image.
                  processing_time:
                    type: number
                    description: The time taken to process the request.
                  processing_id:
                    type: string
                    description: A universally unique identifier for the request.
                required:
                  - image
                  - processing_time
                  - processing_id
              example:
                image: "https://storage.googleapis.com/.../modified-image.png"
                processing_time: 15938.768708
                processing_id: "1e01b632-2d8f-4f71-8a27-36e219d67be5"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400Response"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error500Response"

  /api/ai/images/modify/v3/search-replace-image:
    post:
      summary: Search Replace Content
      description: >
        Enable creative transformations by identifying and replacing specific objects within an image through a single API call.
      operationId: SearchReplaceContent
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                existing_image:
                  type: string
                  format: binary
                  description: The existing image that contains the object to be replaced.
                search_object:
                  type: string
                  description: The object in the image that you want to replace.
                modification:
                  type: string
                  description: The new object that will replace the existing one.
                output_type:
                  type: string
                  description: The format of the generated image.
                  enum:
                    - url
                    - Base64
              required:
                - existing_image
                - search_object
                - modification
                - output_type
            example:
              search_object: cat
              modification: "Change this into a white-colored husky"
              output_type: url
      responses:
        "200":
          description: Image modified successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image URL or Base64 string.
                  processing_time:
                    type: number
                    description: The time taken to process the request.
                  processing_id:
                    type: string
                    description: A unique identifier for the request.
              example:
                image: "https://storage.googleapis.com/.../modified-image.png"
                processing_time: 15938.768708
                processing_id: "1e01b632-2d8f-4f71-8a27-36e219d67be5"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400Response"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error500Response"

  /api/ai/images/modify/v3/recolor-image:
    post:
      summary: Recolor Image
      description: >
        Enable creative transformations by recoloring objects within an image through a single API call.
      operationId: RecolorImage
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                existing_image:
                  type: string
                  format: binary
                  description: The existing image containing the object to be recolored.
                search_object:
                  type: string
                  description: The object in the image that you want to recolor.
                modification:
                  type: string
                  description: The new color or style for the identified object.
                output_type:
                  type: string
                  description: The format of the generated image.
                  enum:
                    - url
                    - Base64
              required:
                - existing_image
                - search_object
                - modification
                - output_type
            example:
              search_object: cat
              modification: "Change this into a white-colored husky"
              output_type: url
      responses:
        "200":
          description: Image modified successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image URL or Base64 string.
                  processing_time:
                    type: number
                    description: The time taken to process the request.
                  processing_id:
                    type: string
                    description: A unique identifier for the request.
                required:
                  - image
                  - processing_time
                  - processing_id
              example:
                image: "https://storage.googleapis.com/.../modified-image.png"
                processing_time: 15938.768708
                processing_id: "1e01b632-2d8f-4f71-8a27-36e219d67be5"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400Response"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error500Response"

  /api/ai/images/modify/v3/replace-background:
    post:
      summary: Replace Background
      description: >
        Enables creative transformations by replacing the background through a single API call.
      operationId: ReplaceBackground
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:        
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                existing_image:
                  type: string
                  format: binary
                  description: The existing image for which the background should be replaced.
                background_image:
                  type: string
                  format: binary
                  description: The image that will be used as the new background.
                  default: https://storage.googleapis.com/sample-image.png
                modification:
                  type: string
                  description: >
                    A textual description of the desired background scene. Either `modification` or `background_image` must be provided.
                output_type:
                  type: string
                  description: Specifies the format of the output image.
              required:
                - existing_image
                - modification
                - output_type
            example:
              existing_image: cat.jpg
              modification: "Change this into a night scenery"
              output_type: "url"
      responses:
        "200":
          description: Image generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image URL.
                  processing_time:
                    type: number
                    description: The time taken to process the request in milliseconds.
                  processing_id:
                    type: string
                    description: A universally unique identifier (UUID) for the request.
                required:
                  - image
                  - processing_time
                  - processing_id
              example:
                image: "https://storage.googleapis.com/sample-image.png"
                processing_time: 15938.768708
                processing_id: "1e01b632-2d8f-4f71-8a27-36e219d67be5"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400Response"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error500Response"

  /api/ai/images/modify/v3/remove-background:
    post:
      summary: Remove Background
      description: >
        Removes the background from an image, isolating the foreground subject while eliminating the original backdrop.
      operationId: RemoveImgBgd
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                existing_image:
                  type: string
                  format: binary
                  description: The image from which the background will be removed.
                output_type:
                  type: string
                  description: Specifies the format of the output image.
              required:
                - existing_image
                - output_type
            example:
              existing_image: person.jpg
              output_type: "url"
      responses:
        "200":
          description: Image processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image URL.
                  processing_time:
                    type: number
                    description: The time taken to process the request in milliseconds.
                  processing_id:
                    type: string
                    description: A universally unique identifier (UUID) for the request.
                required:
                  - image
                  - processing_time
                  - processing_id
              example:
                image: "https://storage.googleapis.com/sample-removed-bg-image.png"
                processing_time: 10238.123456
                processing_id: "b2a1d5f0-9c67-4a21-995b-5c543a98f7d3"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400Response"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error500Response"

  /api/ai/images/modify/v3/remove-text:
    post:
      summary: Remove Text
      description: >
        This API removes all textual content from an image through a single API call, providing a clean and text-free version of the original image.
      operationId: RemoveText
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                existing_image:
                  type: string
                  format: binary
                  description: The image file from which text will be removed.
                output_type:
                  type: string
                  description: Specifies the output format of the processed image (e.g., URL or base64 encoded image).
              required:
                - existing_image
                - output_type
            example:
              existing_image: (binary file)
              output_type: url

      responses:
        "200":
          description: Image processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: URL of the processed image.
                  processing_time:
                    type: number
                    description: Time taken to process the request in milliseconds.
                  processing_id:
                    type: string
                    description: A universally unique identifier for the request.
                required:
                  - image
                  - processing_time
                  - processing_id
              example:
                image: "https://example.com/processed-image.png"
                processing_time: 15938.768708
                processing_id: "1e01b632-2d8f-4f71-8a27-36e219d67be5"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400Response"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error500Response"

  /api/ai/images/modify/v3/extend-image:
    post:
      summary: Extend Image
      description: >
        This API extends the boundaries of an image by inserting additional content while minimizing artifacts and maintaining the quality of the original image.
      operationId: ExtendImageBoundaries
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                existing_image:
                  type: string
                  format: binary
                  description: The image file to be extended.
                output_type:
                  type: string
                  description: Specifies the output format of the processed image (e.g., URL or base64 encoded image).
                leftExtend:
                  type: integer
                  description: Percentage of the original image width to extend on the left side.
                rightExtend:
                  type: integer
                  description: Percentage of the original image width to extend on the right side.
                topExtend:
                  type: integer
                  description: Percentage of the original image height to extend on the top side.
                bottomExtend:
                  type: integer
                  description: Percentage of the original image height to extend on the bottom side.
                description:
                  type: string
                  description: A description of the background and desired content for the extended image.
              required:
                - existing_image
                - output_type
                - leftExtend
                - rightExtend
                - topExtend
                - bottomExtend
                - description
            example:
              existing_image: (binary file)
              output_type: url
              leftExtend: 0
              rightExtend: 0
              topExtend: 0
              bottomExtend: 100
              description: "Show a white field"

      responses:
        "200":
          description: Image processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: URL of the processed image.
                  processing_time:
                    type: number
                    description: Time taken to process the request in milliseconds.
                  processing_id:
                    type: string
                    description: A universally unique identifier for the request.
                required:
                  - image
                  - processing_time
                  - processing_id
              example:
                image: "https://example.com/processed-image.png"
                processing_time: 15938.768708
                processing_id: "1e01b632-2d8f-4f71-8a27-36e219d67be5"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400Response"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error500Response"

  /api/ai/images/modify/v3/sketch-image:
    post:
      summary: Sketches to Image
      description: >
        This API converts a sketch into a realistic image, enabling creative and dynamic transformations.
      operationId: SketchToImage
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                existing_image:
                  type: string
                  format: binary
                  description: The sketch image to be transformed.
                description:
                  type: string
                  description: A textual description of the desired output image.
                output_type:
                  type: string
                  description: Specifies the format of the generated image (e.g., URL).
              required:
                - existing_image
                - description
                - output_type
            example:
              output_type: url
              description: "An owl sitting on a branch."
      responses:
        "200":
          description: Image generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image URL.
                  processing_time:
                    type: number
                    description: The time taken to process the request.
                  processing_id:
                    type: string
                    description: A unique identifier for the request.
                required:
                  - image
                  - processing_time
                  - processing_id
              example:
                image: "https://example.com/generated-image.png"
                processing_time: 15938.768708
                processing_id: "1e01b632-2d8f-4f71-8a27-36e219d67be5"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400Response"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error500Response"

  /api/ai/images/modify/v3/recreate:
    post:
      summary: Recreate Image
      description: >
        This API recreates an image based on an existing image and description.
      operationId: RecreateImage
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                existing_image:
                  type: string
                  format: binary

                  description: The original image to be recreated.
                description:
                  type: string
                  description: A textual description of modifications or improvements.
                output_type:
                  type: string
                  description: Specifies the format of the generated image (e.g., URL).
              required:
                - existing_image
                - description
                - output_type
            example:
              output_type: url
              description: "An owl sitting on a branch with enhanced details."
      responses:
        "200":
          description: Image generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image URL.
                  processing_time:
                    type: number
                    description: The time taken to process the request.
                  processing_id:
                    type: string
                    description: A unique identifier for the request.
                required:
                  - image
                  - processing_time
                  - processing_id
              example:
                image: "https://example.com/recreated-image.png"
                processing_time: 15938.768708
                processing_id: "1e01b632-2d8f-4f71-8a27-36e219d67be5"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400Response"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error500Response"
  /api/ai/v2/web-extract:
    post:
      summary: Web Extraction
      description: This endpoint is used to extract text from a web page using AI. It can take into account all the features such as metadata, inline code, codeblocks, image & html references and other links as well.
      operationId: extractTextFromWebPageV2
      tags:
        - Web Extraction
      security:
        - bearerAuth: []
      requestBody:
        description: Web page extraction request
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - url
              properties:
                url:
                  type: string
                  description: The URL of the web page to extract content from.
                includeHTML:
                  type: boolean
                  description: Include the HTML version of the content in the response.
                  default: false
                onlyMainContent:
                  type: boolean
                  description: Return only the main content, excluding headers, footers, etc.
                  default: true
            example:
              url: "https://example.com"
              includeHTML: false
              onlyMainContent: true

      responses:
        "200":
          description: Web page extracted successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: object
                    required:
                      - content
                      - markdown
                      - linksOnPage
                      - metadata
                    properties:
                      content:
                        type: string
                        description: The extracted text content from the webpage.
                      markdown:
                        type: string
                        description: The extracted content in Markdown format.
                      linksOnPage:
                        type: array
                        items:
                          type: string
                        description: List of links found on the page.
                      metadata:
                        type: object
                        required:
                          - title
                          - description
                          - keywords
                          - robots
                          - ogTitle
                          - ogDescription
                          - ogImage
                          - ogLocale
                          - ogLocaleAlternate
                          - ogSiteName
                          - screenshot
                          - sourceURL
                          - pageStatusCode
                          - processingTime
                          - processingId
                          - processingCount
                        properties:
                          title:
                            type: string
                            description: The title of the page.
                          description:
                            type: string
                            description: Meta description of the page.
                          keywords:
                            type: string
                            description: Meta keywords associated with the page.
                          robots:
                            type: string
                            description: Robots meta tag content.
                          ogTitle:
                            type: string
                            description: Open Graph title.
                          ogDescription:
                            type: string
                            description: Open Graph description.
                          ogImage:
                            type: string
                            description: URL of the Open Graph image.
                          ogLocale:
                            type: string
                            description: Open Graph locale.
                          ogLocaleAlternate:
                            type: array
                            items:
                              type: string
                            description: Alternate Open Graph locales.
                          ogSiteName:
                            type: string
                            description: Open Graph site name.
                          screenshot:
                            type: string
                            description: URL of the page screenshot.
                          sourceURL:
                            type: string
                            description: The original URL of the extracted page.
                          pageStatusCode:
                            type: integer
                            description: The HTTP status code of the extracted page.
                          processingTime:
                            type: number
                            description: Processing time in milliseconds.
                          processingId:
                            type: string
                            description: Unique identifier for the processing request.
                          processingCount:
                            type: integer
                            description: Number of processed requests.

        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400Response"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error500Response"

  /api/ai/v2/pdf-extract:
    post:
      summary: PDF Extration
      description: >
        This endpoint is used to extract text from a PDF using AI. Scanning simultaneously across all pages and with the capability to understand human handwriting, this endpoint can extract text from any PDF.
      operationId: extractTextFromPDFV2
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The PDF file to be extracted.
              required:
                - file
            example:
              file: "/path/to/pdf.pdf"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  processing_time:
                    type: integer
                    description: The amount of time in miliseconds it took to complete the request.
                  processing_id:
                    type: string
                    description: A unique identifier for the server process. This helps us track support requests and complaints.
                  processing_count:
                    type: integer
                    description: Usage statistics for the request. This is what is used for the billing.
                  data:
                    type: string
                    description: The extracted text content.
                required:
                  - processing_time
                  - processing_id
                  - processing_count
                  - data
              example:
                data: "This is a sample text to be converted."
                processing_time: 888
                processing_id: "4b139bfe-1f71-4345-b539-fa6c1700f166"
                processing_count: 12
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400Response"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error500Response"

  /api/ai/speech-text:
    post:
      summary: Speed Text Extraction
      description: This endpoint is used to convert speech to text using AI. It accepts a Form Data containing the audio file and returns the speech-to-text conversion results.
      operationId: speechToText
      tags:
        - Speech Recognition
      security:
        - bearerAuth: []
      requestBody:
        description: Upload an audio file for speech-to-text processing.
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - audio
              properties:
                audio:
                  type: string
                  format: binary
                  description: The audio file to be transcribed.
                keep_fillers:
                  type: boolean
                  description: Keep filler words like "um" and "uh".
                  default: false
                enable_formatting:
                  type: boolean
                  description: Enable text formatting (punctuation, capitalization, etc.).
                  default: true
                enable_profanity_filters:
                  type: boolean
                  description: Enable filters to censor profane words.
                  default: true
            example:
              keep_fillers: false
              enable_formatting: true
              enable_profanity_filters: true

      responses:
        "200":
          description: Speech successfully converted to text
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: object
                    required:
                      - text
                      - speaker_labels
                      - timestamps
                      - processingTime
                      - processingId
                      - processingCount
                    properties:
                      text:
                        type: string
                        description: The transcribed text from the audio file.
                      speaker_labels:
                        type: array
                        items:
                          type: object
                          properties:
                            speaker:
                              type: string
                              description: The identified speaker.
                            text:
                              type: string
                              description: The spoken text associated with the speaker.
                        description: Array containing speaker labels and their corresponding text.
                      timestamps:
                        type: array
                        items:
                          type: object
                          required:
                            - word
                            - start_time
                            - end_time
                            - duration
                          properties:
                            word:
                              type: string
                              description: A word from the transcription.
                            start_time:
                              type: integer
                              description: The start time of the word in milliseconds.
                            end_time:
                              type: integer
                              description: The end time of the word in milliseconds.
                            duration:
                              type: integer
                              description: The duration of the word in milliseconds.
                        description: Array of words with their timestamps.
                      processingTime:
                        type: number
                        description: Processing time in milliseconds.
                      processingId:
                        type: string
                        description: Unique identifier for the processing request.
                      processingCount:
                        type: integer
                        description: Number of processed requests.
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400Response"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error500Response"

  /api/ai/moderation:
    post:
      summary: Text Moderation
      description: >
        This endpoint is used to moderate text content using AI.
        It accepts a JSON object containing the text moderation parameters and returns moderation results.
      operationId: moderateText
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text_content:
                  type: string
                  description: The text to be moderated.
              required:
                - text_content
            example:
              text_content: "This is a sample text to be moderated."
      responses:
        "200":
          description: Text moderated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      sexual:
                        type: string
                      hate:
                        type: string
                      harassment:
                        type: string
                      self-harm:
                        type: string
                      sexual/minors:
                        type: string
                      hate/threatening:
                        type: string
                      violence/graphic:
                        type: string
                      self-harm/intent:
                        type: string
                      self-harm/instructions:
                        type: string
                      harassment/threatening:
                        type: string
                      violence:
                        type: string
                    required:
                      - sexual
                      - hate
                      - harassment
                      - self-harm
                      - sexual/minors
                      - hate/threatening
                      - violence/graphic
                      - self-harm/intent
                      - self-harm/instructions
                      - harassment/threatening
                      - violence
                    description: The moderation results.
                  processing_time:
                    type: integer
                    description: The amount of time in miliseconds it took to complete the request.
                  processing_id:
                    type: string
                    description: A unique identifier for the server process. This helps us track support requests and complaints.
                  processing_count:
                    type: integer
                    description: Usage statistics for the request. This is what is used for the billing.
                required:
                  - data
                  - processing_time
                  - processing_id
                  - processing_count
                example:
                  data:
                    sexual: "0.016973"
                    hate: "0.001243"
                    harassment: "0.012784"
                    self-harm: "0.000040"
                    sexual/minors: "0.000049"
                    hate/threatening: "0.000002"
                    violence/graphic: "0.000016"
                    self-harm/intent: "0.000059"
                    self-harm/instructions: "0.000007"
                    harassment/threatening: "0.000002"
                    violence: "0.000333"
                  processing_time: 888
                  processing_id: "4b139bfe-1f71-4345-b539-fa6c1700f166"
                  processing_count: 3
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400Response"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error500Response"
  /api/ai/images/v2/image-moderation:
    post:
      summary: Image Moderation
      description: >
        This endpoint is used to moderate an image using AI.
        It accepts a Form Data containing the image and returns the moderation results.
      operationId: moderateImageV2
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: The image to be sent as input.
              required:
                -image
            example:
              image: "/path/to/image.jpg"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - processingTime
                  - processingId
                  - processingCount
                properties:
                  data:
                    type: array
                    minItems: 1
                    items:
                      type: object
                      required:
                        - Confidence
                        - Name
                        - ParentName
                        - TaxonomyLevel
                      properties:
                        Confidence:
                          type: number
                        Name:
                          type: string
                        ParentName:
                          type: string
                        TaxonomyLevel:
                          type: integer
                  processingTime:
                    type: number
                    description: The amount of time in miliseconds it took to complete the request.
                  processingId:
                    type: string
                    description: A unique identifier for the server process. This helps us track support requests and complaints.
                  processingCount:
                    type: integer
                    description: Usage statistics for the request. This is what is used for the billing.
                example:
                  summary: Example response with moderation data
                  value:
                    data:
                      - Confidence: 85.734561
                        Name: Explicit Nudity
                        ParentName: Adult Content
                        TaxonomyLevel: 3
                    processingTime: 888
                    processingId: "4b139bfe-1f71-4345-b539-fa6c1700f166"
                    processingCount: 3
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400Response"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error500Response"
  /api/ai/train-data:
    post:
      summary: Model Training
      description: >
        This endpoint allows users to train custom AI models for search and content processing. Users can upload files, specify model parameters, and initiate training for different model versions.
      operationId: trainAIModel
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: string
                  format: binary
                  description: The file to be used for training the model.
                type:
                  type: string
                  enum: [search, content]
                  description: The type of model training.
                modelType:
                  type: string
                  enum: [v2, v3]
                  description: The version of the model to be trained.
                name:
                  type: string
                  description: The name of the model to identify it later.
                modelId:
                  type: string
                  description: Custom model ID for retraining an existing model.
                  default: sample id
              required:
                - files
                - type
                - modelType
                - name
            example:
              files: "/path/to/Pitch Deck July 2024.pdf"
              type: "search"
              modelType: "v3"
              name: "Some name"
              modelId: "sample id"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  processing_time:
                    type: integer
                    description: The amount of time in miliseconds it took to complete the request.
                  processing_id:
                    type: string
                    description: A unique identifier for the server process. This helps us track support requests and complaints.
                  processing_count:
                    type: integer
                    description: Usage statistics for the request. This is what is used for the billing.
                  data:
                    type: string
                    description: Model training results.
                required:
                  - processing_time
                  - processing_id
                  - processing_count
              example:
                processing_time: 888
                processing_id: "4b139bfe-1f71-4345-b539-fa6c1700f166"
                processing_count: 3
                data: "The AI model training process has been successfully initiated."
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400Response"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error500Response"
  /api/ai/images/v2/face-detection:
    post:
      summary: Face Detection
      description: >
        This endpoint is used to identify faces and characteristics in an image.
        It accepts a Form Data containing the image and returns the
        the face detection results.
      operationId: detectFacesInImageV2
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multi-part/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: The image to be sent as input.
              required:
                - image

            example:
              image: "/path/to/image.jpg"

      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      analysed_data:
                        type: array
                        items:
                          type: object
                          properties:
                            age_range:
                              type: object
                              properties:
                                high:
                                  type: integer
                                  example: 26
                                low:
                                  type: integer
                                  example: 18
                            beard:
                              type: object
                              properties:
                                confidence:
                                  type: number
                                  example: 73.7099380493164
                                value:
                                  type: boolean
                                  example: false
                            bounding_box:
                              type: object
                              properties:
                                height:
                                  type: number
                                  example: 0.22712668776512146
                                left:
                                  type: number
                                  example: 0.3961663544178009
                                top:
                                  type: number
                                  example: 0.2599637806415558
                                width:
                                  type: number
                                  example: 0.22138258814811707
                            confidence:
                              type: number
                              example: 99.99722290039062
                            emotions:
                              type: array
                              items:
                                type: object
                                properties:
                                  confidence:
                                    type: number
                                  type:
                                    type: string
                            eye_direction:
                              type: object
                              properties:
                                confidence:
                                  type: number
                                pitch:
                                  type: number
                                yaw:
                                  type: number
                            eyeglasses:
                              type: object
                              properties:
                                confidence:
                                  type: number
                                value:
                                  type: boolean
                            eyes_open:
                              type: object
                              properties:
                                confidence:
                                  type: number
                                value:
                                  type: boolean
                            face_occluded:
                              type: object
                              properties:
                                confidence:
                                  type: number
                                value:
                                  type: boolean
                            gender:
                              type: object
                              properties:
                                confidence:
                                  type: number
                                value:
                                  type: string
                            landmarks:
                              type: array
                              items:
                                type: object
                                properties:
                                  type:
                                    type: string
                                  x:
                                    type: number
                                  y:
                                    type: number
                            mouth_open:
                              type: object
                              properties:
                                confidence:
                                  type: number
                                value:
                                  type: boolean
                            mustache:
                              type: object
                              properties:
                                confidence:
                                  type: number
                                value:
                                  type: boolean
                            pose:
                              type: object
                              properties:
                                pitch:
                                  type: number
                                roll:
                                  type: number
                                yaw:
                                  type: number
                            quality:
                              type: object
                              properties:
                                brightness:
                                  type: number
                                sharpness:
                                  type: number
                            smile:
                              type: object
                              properties:
                                confidence:
                                  type: number
                                value:
                                  type: boolean
                            sunglasses:
                              type: object
                              properties:
                                confidence:
                                  type: number
                                value:
                                  type: boolean
                  processing_time:
                    type: number
                  processing_id:
                    type: string
                  processing_count:
                    type: integer
                required:
                  - data
                  - processing_time
                  - processing_id
                  - processing_count
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400Response"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error500Response"

  /api/ai/images/v2/facial-comparison:
    post:
      summary: Facial Comparison
      description: Compare two images to identify and match faces.
      operationId: FacialComparison
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                source_image:
                  type: string
                  format: binary
                target_image:
                  type: string
                  format: binary
              required:
                - source_image
                - target_image
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      matched_faces_count:
                        type: integer
                      unmatched_faces_count:
                        type: integer
                      matched_faces:
                        type: array
                        items:
                          type: object
                          properties:
                            similarity:
                              type: number
                            confidence:
                              type: number
                            quality:
                              type: object
                              properties:
                                brightness:
                                  type: number
                                sharpness:
                                  type: number
                      unmatched_faces:
                        type: array
                        items:
                          type: string
                    required:
                      - matched_faces_count
                      - unmatched_faces_count
                      - matched_faces
                      - unmatched_faces
                  processing_time:
                    type: number
                  processing_id:
                    type: string
                  processing_count:
                    type: integer
                required:
                  - processing_time
                  - processing_id
                  - data
                  - processing_count
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400Response"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error500Response"

  /api/ai/images/v2/image-analysis:
    post:
      summary: Image Analysis
      description: Identifying and extracting text from images using machine learning
      operationId: ImageAnalysis
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                output_type:
                  type: string
                training_data:
                  type: string
                question:
                  type: string
                randomness:
                  type: string
                images:
                  type: string
                  format: binary
                stream_data:
                  type: string
              required:
                - output_type
                - training_data
                - question
                - randomness
                - images
                - stream_data
      responses:
        "500":
          description: server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  processing_time:
                    type: number
                  processing_id:
                    type: string
              example:
                status: "Error"
                message: "Something went wrong. We were unable to detect the text."
                processing_time: 315.648042
                processing_id: "9f7803c3-2098-46af-a4d3-3db94128d932"
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  processing_time:
                    type: number
                  processing_id:
                    type: string
                  messsage: 
                    type: string
                required:
                  - status
                  - processing_time
                  - message
                  - processing_id
              example:
                data: "This image depicts a serene and romantic scene of two people sitting together watching a sunset. The silhouettes of a boy and a girl are shown from behind, sitting in tall grass or wheat fields. They appear to be gazing at a beautiful orange and pink sky as the sun sets on the horizon.\n\nThe artwork has a soft, dreamlike quality with pastel colors and a warm glow. Fluffy clouds frame the sky, and there are small white dots that could represent stars or fireflies beginning to appear. In the top left corner, there are some small red heart shapes, adding to the romantic atmosphere.\n\nThe overall mood of the image is peaceful and intimate, suggesting a quiet moment shared between two people enjoying nature's beauty together. The style appears to be digital art or illustration, with a painterly quality that enhances the emotional impact of the scene."
                processing_time: 6240.1868269999995
                processing_id: "12935919-fd9f-47a2-8c53-57f231c6bf9a"
                processing_count: 1
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400Response"
  /api/ai/images/v2/image-text-detection:
    post:
      summary: Image Text Detection 
      description: Identifying and extracting text from images using machine learning
      operationId: ImageTextDetection
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                output_type:
                 type: string
                image:
                  type: string
                  format: binary
              required:
                - output_type
                - image
                
      responses:
        '500':
          description: server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: string
                  message:
                    type: string
                  processing_time:
                    type: number
                  processing_id:
                    type: string
              example: 
                status: "Error"
                message: "Something went wrong. We were unable to detect the text."
                processing_time: 315.648042
                processing_id: "9f7803c3-2098-46af-a4d3-3db94128d932"
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      lines:
                        type: array
                        items:
                          type: object
                          properties:
                            detected_text:
                              type: string
                            confidence:
                              type: number
                            geometry:
                              type: object
                              properties:
                                bounding_box:
                                  type: object
                                  properties:
                                    height:
                                      type: number
                                    left:
                                      type: number
                                    top:
                                      type: number
                                    width:
                                      type: number
                                polygon:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      x:
                                        type: number
                                      y:
                                        type: number
                      words:
                        type: array
                        items:
                          type: object
                          properties:
                            detected_text:
                              type: string
                            confidence:
                              type: number
                            geometry:
                              type: object
                              properties:
                                bounding_box:
                                  type: object
                                  properties:
                                    height:
                                      type: number
                                    left:
                                      type: number
                                    top:
                                      type: number
                                    width:
                                      type: number
                                polygon:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      x:
                                        type: number
                                      y:
                                        type: number
                      processingTime:
                        type: number
                      processingId:
                        type: string
                      processingCount:
                        type: integer
              example:
                data:
                  lines:
                    - detected_text: veniam in proident laboris id
                      confidence: -30895365.34443526
                      geometry:
                        bounding_box:
                          height: -31206125.179928318
                          left: -96637320.12569612
                          top: 72105085.85295844
                          width: -21593577.009167224
                        polygon:
                          - x: 63376361.36601299
                            'y': -77803673.34713829
                          - x: -74521114.12606373
                            'y': -26135173.209431574
                    - detected_text: Excepteur pariatur ullamco Duis consequat
                      confidence: -4261648
                      geometry:
                        bounding_box:
                          height: -28190953.19340624
                          left: 89239545.47935206
                          top: -71673093.96241266
                          width: 32407390.979280755
                        polygon:
                          - x: -31253958.583303064
                            'y': -84851443.30001076
                          - x: -84473196.48598465
                            'y': 89028023.30285352
                          - x: -27443724.96811551
                            'y': -48401381.156853415
                    - detected_text: velit magna nisi proident cupidatat
                      confidence: 8906688.849750921
                      geometry:
                        bounding_box:
                          height: 75834347.91818768
                          left: -11821339.03140232
                          top: -56033619.35002953
                          width: 76017443.26157764
                        polygon:
                          - x: -77358190.00776175
                            'y': 14847286.609454796
                          - x: -67689260.22278014
                            'y': 77141078.64575005
                          - x: -67744233.95401081
                            'y': 57326317.07390183
                  words:
                    - detected_text: id
                      confidence: -39853875
                      geometry:
                        bounding_box:
                          height: -45470979.08876139
                          left: -47060244.255420305
                          top: 71232768.62651542
                          width: -8867599.416114032
                        polygon:
                          - x: 46436426.86077446
                            'y': -55724084.958356544
                          - x: -64429934.47571213
                            'y': -78355501.72030827
                          - x: -85404678.74940693
                            'y': 54295701.94300091
                    - detected_text: do
                      confidence: -92029197.6418579
                      geometry:
                        bounding_box:
                          height: 91937297.73557901
                          left: 8812557.612716526
                          top: -48544210.269565366
                          width: -59430361.40269524
                        polygon:
                          - x: -9339996.09998338
                            'y': 10790946.627500102
                          - x: 22327456.373290613
                            'y': -79893445.13945813
                          - x: 61168081.628799826
                            'y': -74684930.63338909
                processingTime: 62100747.350598514
                processingId: in quis consectetur aute
                processingCount: 89795562
        

  /authentication:
    post:
      summary: Authorization Check
      description: >
        This endpoint is used to check API request validity by authenticating the user profile.
      operationId: authenticateUser
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  userEmail:
                    type: string
                    description: The authenticated user's email.
                  userDisplayName:
                    type: string
                    description: The authenticated user's display name.
                  orgName:
                    type: string
                    description: The organization name associated with the user.
                  processingTime:
                    type: number
                    description: The time taken to process the request in milliseconds.
                  processingId:
                    type: string
                    description: A unique identifier for tracking.
              example:
                userEmail: "ghosh.sagnik2000@gmail.com"
                userDisplayName: "Sagnik Ghosh"
                orgName: "Ayush Kullluu"
                processingTime: 2110.4155
                processingId: "2511a877-1299-42ef-8212-828269cfad03"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  processingTime:
                    type: number
                  processingId:
                    type: string
              example:
                status: "Error"
                message: "No valid credentials provided"
                processingTime: 0.106625
                processingId: "9c02c18f-a591-4d48-8b1a-eacc6eabda82"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  processingTime:
                    type: number
                  processingId:
                    type: string
              example:
                status: "Error"
                message: "Invalid origin domain. Please whitelist your domain in the settings."
                processingTime: 2587.611083
                processingId: "3c9b76fe-2560-407e-81ec-ee1ffcb66101"
        "429":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  processingTime:
                    type: number
                  processingId:
                    type: string
              example:
                status: "Error"
                message: "You exceeded your current quota, please check your plan and billing details. Contact support for more details."
                processingTime: 434.298417
                processingId: "b6211208-094a-4784-901b-c49a563cb3dc"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  processingTime:
                    type: number
                  processingId:
                    type: string
              example:
                status: "Error"
                message: "An unexpected server error occurred. Please try again later."
                processingTime: 500.12345
                processingId: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
  /:
    get:
      summary: Server Status
      description: Returns server readiness status or an error message
      responses:
        "200":
          description: Server is ready to accept requests
          content:
            text/plain:
              schema:
                type: string
              example: |
                -++=-:
                .+==-:       =+=----*=--
                .*---=+=: .+*-------=---+=:                                               .. .
                  =+--=-=%%%%#=-----=-----#                                          ..........
                    -+---+#%%%%#*=--=----=+                                    ..............:.
                      ++=--=*#%%%%#*+=---#                                   ..........:::::..:.
                    .::-+*+---=*#%%%%%###=                                 .:.::::::::::::::---:
                    .::--+*##+=--=+*#%%%%-                                ...:::::::::::--------
                   ...:-=++**#%#*=----=+=-++=                                .---:::------------:
                   ...:-=++*****###*+=----=-=*+                              ::::--==------::::--
                    .::-==+********+ .-==+++++*                              ---========---
                     .:--=++******-                                         :========-----.
                       .--=+**+=:                                           =======-------
                                                                      :========----:.
                                                                      ========------
                                                                     :======-------.
                +++*************=            *****####%%%%#          =====---=-----
                +****************:          =%%%%%%%%%%%%%%=        :===-===---===:
                +****************+          #%%%%%%%%%%%%%%%.       ==============
                +*****************-        =%%%%%%%%%%%%%%%%+      :=====++++++++-
                +*****************+        #%%%%%%%%%%%%%%%%#.     ==++++++++++++
                +**************++++=      =%%%%%%%%%%%%%%%###=    :+++++++++++++-
                +***********++++++++:     %%%%%%%%%%%%#####***.   =******+++++++.
                   ..:+*+++++++++++++.   :%%%%%%#######*******+   .******+++***=
                      :++++++++++++++-    *%########***********:   -***+*******.
                       =+++++++++++===:   :######**************+    +*********+
                       .=++++++=======-    +#*******************:   :*********:
                        :+=============:   .++***************+++=    +*******+
                         =========-=----.   -*************+++++**:   .*******:
                         .======------:.:    +********++++++*++*++    -*****+
                          -=-------:::::-:   -*+***+++++++++++++++-    *****:
                           -----:::::-----.   +++++++++++++++++++++    :***+
                           .-:..::----:::::   :+++++-=+*+++++++++++-    +*#:
                            ..:----::::::::    =+++= :+++++++++++===.   .*+
                             --:::::::.....    .+++.  =++++++++====+-    =:
                             .:::::.... .....   -+-   .++++++========.
                              ..:... ........    =     -+++==========-
                               .  ............   .      ==============.
                                ...............         .========--===-
                                ...............          -==========---.

                WorqHat API Endpoints
                ----------------------

                Server is ready to accept requests

                Learn more about us at https://worqhat.com
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error"
