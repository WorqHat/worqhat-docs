openapi: 3.0.1
info:
  title: API endpoints
  description: >
    Different API endpoints and their parameters have been described here.
  version: 2.1.2
components:
  securitySchemes:
    bearerAuth: 
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error400Response:
      type: object
      properties:
        status:
          type: string
          description: Status code indicating the error.
        message:
          type: string
          description: A message describing the error.
        processing_id:
          type: string
          description: A universally unique identifier for the request.
        processing_time:
          type: number
          description: The time taken to process the request.
      example:
        status: "400"
        message: "Bad Request"
        processing_id: "123e4567-e89b-12d3-a456-426614174000"
        processing_time: 343

    Error500Response:
      type: object
      properties:
        status:
          type: string
          description: Status code indicating the error.
        message:
          type: string
          description: A message describing the error.
        processing_id:
          type: string
          description: A universally unique identifier for the request.
        processing_time:
          type: number
          description: The time taken to process the request.
      example:
        status: "500"
        message: "Internal Server Error"
        processing_id: "123e4567-e89b-12d3-a456-426614174001"
        processing_time: 500
paths:
  /api/ai/content/v4:
    post:
      summary: Text Only Conversational text generation
      description: >
        WorqHat AiCon V4 API allows you to generate text using only text input.
      operationId: TextOnlyConversational
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                question:
                  type: string
                  description: The message or question you want to pass to the model.
                model:
                  type: string
                  description: ID of the model to use. See the model endpoint compatibility table for details on which models work and are currently supported.
                randomness:
                  type: number
                  description: >
                    What model prediction randomness to use, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
                stream_data:
                  type: boolean
                  description: >
                    If set, partial message deltas will be sent as data-only server-sent events, with the stream terminated by a data [DONE] message.
                training_data:
                  type: string
                  description: >
                    You can pass any sort of training data or system messages that you want the model to follow when answering your questions.
                response_type:
                  type: string
                  description: >
                    Specifies the format that the model must output.
                conversation_id:
                  type: string
                  description: >
                    Used as per requirement.
                preserve_history:
                  type: boolean
                  description: >
                    Set to true to maintain conversation history.
                conversation_history:
                  type: array
                  items:
                    type: object
                    properties:
                      question:
                        type: string
                      answer:
                        type: string
              required:
                - question
                - model
                - randomness
                - stream_data
                - training_data
                - response_type
                - preserve_history
                - conversation_history
            example:
              question: "hiii there"
              model: "aicon-v4-nano-160824"
              randomness: 0.5
              stream_data: false
              training_data: "You are alex and you are one of the best Tour Guides. answer everything while starting with your name"
              response_type: "text"
              conversation_id: "conv_1724236791746"
              preserve_history: true
              conversation_history:
                - "What is the capital of India?: New Delhi"
                - "What is the capital of USA?: Washington DC"
          multipart/form-data:
            schema:
              type: object
              properties:
                question:
                  type: string
                  description: The message or question you want to pass to the model.
                model:
                  type: string
                  description: ID of the model to use. See the model endpoint compatibility table for details on which models work and are currently supported.
                  enum:
                    - con-v4-nano-160824
                    - aicon-v4-large-160824
                    - aicon-v4-alpha-160824
                files:
                  type: array
                  items:
                    type: string
                  description: Files that you want to upload. You can send Images, Videos, PDFs, and Audio files. It has to be sent as an array.
                stream_data:
                  type: string
                  enum:
                    - "true"
                    - "false"
                training_data:
                  type: string
                  description: If set, partial message deltas will be sent, to reduce the waiting time. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a `data:` [DONE] message.
                response_type:
                  type: string
                  description: An object specifying the format that the model must output. Compatible with all AiCon V4 models.Setting to { `"response_type":` `"json"` } will enable the model to send back structured outputs which ensures the model will match your supplied JSON schema in the message. `Important:` when using JSON mode, you must also instruct the model to produce JSON yourself via the training_data or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly `"stuck"` request. Also note that the message content may be partially cut off if finish_reason=`"DONE"`, which indicates the generation exceeded maximum tokens or the conversation exceeded the max context length and you will be billed for the whitespace.
                conversation_id:
                  type: string
                  description: Every interaction with the Language Model is associated with a Conversation Id. To let the model maintain a history of your conversations by default, you can pass the conversation id. You can define a conversation id on your own or you can just use the conversation id that is returned as a response in the first conversation itself. Since you will be dealing with files here, we don't allow you to pass a conversation history on your own.
              required:
                - question
                - model
            example:
              question: "Can you explain this image?"
              model: "aicon-v4-nano-160824"
              files: ["file1.png", "file2.pdf"]
              stream_data: "false"
              response_type: "json"
              conversation_id: "conv_1724236791746"
              training_data: "Explain customer service queries."
      responses:
        '200':
          description: Text generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: string
                    description: The response output of the processing.
                  processing_time:
                    type: number
                    description: The amount of time in miliseconds it took to complete the request.
                  processing_id:
                    type: string
                    description: A unique identifier for the server process. This helps us track support requests and complaints.
                  processing_count:
                    type: integer
                    description: Usage statistics for the request. This is what is used for the billing.
                  conversation_id:
                    type: string
                    description: A unique identifier for the Message. You can use this conversation id later when building multiturn chat applications. This conversation id is what keeps a track of your past conversation. You can use this to keep continuing your requests one after the other without the hassle of maintaining the conversation history on your own.
                  model:
                    type: string
                    description: The model used for the process.
              example:
                Text Output:
                  value:
                    content: "Hi there!  My name is Alex, and I'm happy to help you with anything you need for your tour.  What can I do for you today?"
                    processingTime: 3105.397454
                    processingId: "8aa97481-20f9-48f4-a12d-d02eb6c1d62a"
                    processing_count: 84
                    conversation_id: "conv_1724236791746"
                    model: "aicon-v4-nano-160824"
                JSON Structured Output:
                  value:
                    content: "{\"response\": \"Hi there!  My name is Alex, and I'm delighted to assist you with your travel needs. What can I help you with today\"}"
                    processingTime: 2946.176112
                    processingId: "5944ab45-8bd7-4151-853d-da6cf315d617"
                    processing_count: 90
                    conversation_id: "conv_1724237541817"
                    model: "aicon-v4-nano-160824"
                Streaming Data:
                  value:
                    data:
                      - content: "Hi"
                        model: "aicon-v4-nano-160824"
                        timestamp: 1724240278523
                        processing_id: "bc4cc3b9-d000-4866-83ad-ad71abf10c8f"
                        conversation_id: "conv_1724240276193"
                      - content: " there! My name is Alex, and I'm excited to be your tour"
                        model: "aicon-v4-nano-160824"
                        timestamp: 1724240278630
                        processing_id: "bc4cc3b9-d000-4866-83ad-ad71abf10c8f"
                        conversation_id: "conv_1724240276193"
                      - content: " guide today. What can I help you with? \n"
                        model: "aicon-v4-nano-160824"
                        timestamp: 1724240278708
                        processing_id: "bc4cc3b9-d000-4866-83ad-ad71abf10c8f"
                        conversation_id: "conv_1724240276193"
                      - content: ""
                        model: "aicon-v4-nano-160824"
                        timestamp: 1724240278712
                        processing_id: "bc4cc3b9-d000-4866-83ad-ad71abf10c8f"
                        conversation_id: "conv_1724240276193"
                      - content: ""
                        model: "aicon-v4-nano-160824"
                        finishReason: "stop"
                        timestamp: 1724240278716
                        processing_id: "bc4cc3b9-d000-4866-83ad-ad71abf10c8f"
                        conversation_id: "conv_1724240276193"
                        wordCount: 77
  /api/ai/content/v4/{modelType}/{modelId}:
    post:
      summary: Finetuned Models 
      description: WorqHat AiCon V4 Custom Model API allows you to generate text using only text input.
      operationId: FinetunedModels
      tags:
        - AI Services
      security:
        - bearerAuth: []
      parameters:
        - name: modelType
          in: path
          required: true
          description: The type of the base model that you have used to train the data.
          schema:
            type: string
            enum:
              - nano
              - large
            default: nano
        - name: modelId
          in: path
          required: true
          description: The unique ID of the custom model that has been created.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                question:
                  type: string
                  description: The message or question you want to pass to the model.
                model:
                  type: string
                  description: ID of the model to use. See the model endpoint compatibility table for details.
                randomness:
                  type: number
                  description: >
                    What model prediction randomness to use, between 0 and 1. Higher values (e.g., 0.8) make 
                    the output more random, while lower values (e.g., 0.2) make it more deterministic.
                  minimum: 0
                  maximum: 1
                stream_data:
                  type: boolean
                  description: >
                    If set to `true`, partial message deltas will be sent to reduce waiting time.
                    Tokens will be streamed as data-only server-sent events, terminating with `[DONE]`.
                training_data:
                  type: string
                  description: Allows passing system messages or training data to influence model responses.
                    Supports up to 750K fixed context window without limitations on input.
                response_type:
                  type: string
                  description: >
                    Specifies the output format. Setting `response_type: json` ensures the model
                    adheres to JSON format. Without proper instruction in `training_data`, the model 
                    may generate an unending whitespace stream.
                conversation_id:
                  type: string
                  description: A unique identifier for each conversation. If omitted, the model generates one.
                    Recommended to use the conversation ID returned in the first response.
                preserve_history:
                  type: boolean
                  description: >
                    Enables manually maintaining conversation history instead of using `conversation_id`.
                conversation_history:
                  type: array
                  description: Manually maintain past conversation records.
                  items:
                    type: object
                    properties:
                      Input Prompt 1:
                        type: string
                        description: Model Output 1
                      Input Prompt 2:
                        type: string
                        description: Model Output 2
              required:
                - question
                - model
                - randomness
                - stream_data
                - training_data
                - response_type
                - preserve_history
                - conversation_history
            example:
              training_data: >
                You will be provided with customer service queries. Classify each query into a 
                primary and secondary category. Provide JSON output with keys: `primary` and `secondary`.
              response_type: "json"
              question: "How do I reset my password?"
              conversation_id: "conv_1724236791746"
              preserve_history: false
              conversation_history:
                - user_prompt: "I need help with my bill."
                  model_response: "Sure! Can you clarify what specific issue you're facing?"
          multipart/form-data:
            schema:
              type: object
              properties:
                question:
                  type: string
                  description: The message or question you want to pass to the model.
                stream_data:
                  type: string
                  description: >
                    If set to `true`, partial message deltas will be sent to reduce waiting time.
                    Tokens will be streamed as data-only server-sent events, terminating with `[DONE]`.
                  enum: 
                    - "true"
                    - "false"
                training_data:
                  type: string
                  description: Having a 750K fixed context window and with no limitations on the input, you can pass any sort of training data ir system messages that you want the model to follow when answering to your questions.
                files:
                  type: array
                  items:
                    type: string
                  description: Files that you want to upload. You can send Images, Videos, PDFs, and Audio files. It has to be sent as an array.
                  minItems: 50  
                response_type:
                  type: string
                  description: >
                    An object specifying the format that the model must output. Compatible with all AiCon V4 models.Setting to { "response_type": "json" } will enable the model to send back structured outputs which ensures the model will match your supplied JSON schema in the message. Important: when using JSON mode, you must also instruct the model to produce JSON yourself via the training_data or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="DONE", which indicates the generation exceeded maximum tokens or the conversation exceeded the max context length and you will be billed for the whitespace.
                  enum:
                    - text
                    - json
                conversation_id:
                  type: string
                  description: >
                    Every interaction with the Language Model is associated with a Conversation Id. To let the model maintain a history of your conversations by default, you can pass the conversation id. You can define a conversation id on your own or you can just use the conversation id that is returned as a response in the first conversation itself. Since you will be dealing with files here, we don't allow you to pass a conversation history on your own.
              required: 
                - question
            example:
              training_data: >
                You will be provided with customer service queries. Classify each query into a
                primary and secondary category. Provide JSON output with keys: `primary` and `secondary`.
              response_type: "json"
              question: "How do I reset my password?"
              conversation_id: "conv_1724236791746"
              preserve_history: false
              conversation_history:
                - user_prompt: "I need help with my bill."
                  model_response: "Sure! Can you clarify what specific issue you're facing?"
      responses:
        '200':
          description: Text Generated Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: string
                    description: The generated response text.
                  processing_count:
                    type: integer
                    description: Usage count for billing.
                  processing_time:
                    type: number
                    description: Time taken (in milliseconds) to process the request.
                  processing_id:
                    type: string
                    description: Unique identifier for the process (for tracking support requests).
                  conversation_id:
                    type: string
                    description: The conversation ID for multi-turn chat applications.
                  model:
                    type: string
                    description: The model used for processing.
              example:
                Text Output:
                  value:
                    content: "Hi there!  My name is Alex, and I'm happy to help you with anything you need for your tour.  What can I do for you today?"
                    processingTime: 3105.397454
                    processingId: "8aa97481-20f9-48f4-a12d-d02eb6c1d62a"
                    processingCount: 84
                    conversation_id: "conv_1724236791746"
                    model: "aicon-v4-alpha-160824"
                JSON Structured Output:
                  value:
                    content: {"response": "Hi there!  My name is Alex, and I'm delighted to assist you with your travel needs. What can I help you with today?"}
                    processingTime: 2946.176112
                    processingId: "5944ab45-8bd7-4151-853d-da6cf315d617"
                    processingCount: 90
                    conversation_id: "conv_1724237541817"
                    model: "aicon-v4-alpha-160824"
                Streaming Data:
                  value:
                    data:
                      - content: "Hi"
                        model: "aicon-v4-alpha-160824"
                        timestamp: 1724240278523
                        processing_id: "bc4cc3b9-d000-4866-83ad-ad71abf10c8f"
                        conversation_id: "conv_1724240276193"                
                      - content: " there! My name is Alex, and I'm excited to be your tour"
                        model: "aicon-v4-alpha-160824"
                        timestamp: 1724240278630
                        processing_id: "bc4cc3b9-d000-4866-83ad-ad71abf10c8f"
                        conversation_id: "conv_1724240276193"                
                      - content: " guide today. What can I help you with? \n"
                        model: "aicon-v4-alpha-160824"
                        timestamp: 1724240278708
                        processing_id: "bc4cc3b9-d000-4866-83ad-ad71abf10c8f"
                        conversation_id: "conv_1724240276193"               
                      - content: ""
                        model: "aicon-v4-alpha-160824"
                        timestamp: 1724240278712
                        processing_id: "bc4cc3b9-d000-4866-83ad-ad71abf10c8f"
                        conversation_id: "conv_1724240276193"                
                      - content: ""
                        model: "aicon-v4-alpha-160824"
                        finishReason: "stop"
                        timestamp: 1724240278716
                        processing_id: "bc4cc3b9-d000-4866-83ad-ad71abf10c8f"
                        conversation_id: "conv_1724240276193"
                        wordCount: 77
  /api/ai/search/v3/{modelId}:
    post:
      summary: Search V3 
      description: Meaning and Context Based Search experience and Recommendations powered by AI
      operationId: SearchV3
      tags:
        - AI Services
      security:
        - bearerAuth: []
      parameters:
        - name: modelId
          in: path
          required: true
          description: The Custom Trained Model ID. You can get this Model ID from your Model Training Dashboard.
          example: 8fa1b230-917b-4d83-8d56-4760b3537e71
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                question:
                  type: string
                  description: The question you want to ask.
                search_count:
                  type: integer
                  description: The number of respoonses you want in output
              required:
                - question
      responses:
        '200':
          description: Text Generated Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        source:
                          type: string
                        content:
                          type: string
                        page:
                          type: integer
                  processing_time:
                    type: number
                  processing_id:
                    type: string
              example:
                data:
                  - source: "string"
                    content: "string"
                    page: 0
                processingTime: 0
                processingId: "string"
  /api/ai/images/generate/v2:
    post:
      summary: Image Generation using V2
      description: >
        AI model of version 2 has been used to create images. It is the fastest and basic model to create images.
      operationId: generateImageV2
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                prompt:
                  type: array
                  description: Prompt is used for generating images.
                  items:
                    type: string
                image_style:
                  type: string
                  description: The style of the image to be generated.
                  example: "realistic"
                orientation:
                  type: string
                  description: The orientation of the image.
                  enum: 
                    - square
                    - portrait
                    - landscape
                output_type:
                  type: string
                  description: >
                    The format of the generated image. 
                    'url' returns a direct image link, and 'Base64' returns an encoded string.
                  enum:
                    - url
                    - Base64
            example:
              prompt: ["A cat floating on the clouds"]
              image_style: "realistic"
              output_type: "url"
              orientation: "square"

      responses:
        '200':
          description: Image generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image.
                  processing_time:
                    type: integer
                    description: The time taken to process the request (in milliseconds).
                  processing_id:
                    type: string
                    description: Unique request identifier for tracking.
              example:
                image: "https://storage.googleapis.com/example-image-url"
                processing_time: 15938
                processing_id: "1e01b632-2d8f-4f71-8a27-36e219d67be5"
        '400':
          description: Bad Request
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'



  /api/ai/images/generate/v3:
    post:
      summary: Image Generation using V3
      description: >
        This endpoint is used to generate an image using AI model V3.
        It accepts a JSON object containing the image generation parameters and returns the generated image.
      operationId: generateImageV3
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                prompt:
                  type: array
                  description: Prompt is used for generating images.
                  items:
                    type: string
                image_style:
                  type: string
                  description: The style of the image to be generated.
                  example: "Anime"
                orientation:
                  type: string
                  description: The orientation of the image.
                  enum: 
                    - square
                    - portrait
                    - landscape
                output_type:
                  type: string
                  description: >
                    The format of the generated image. 
                    'url' returns a direct image link, and 'Base64' returns an encoded string.
                  enum:
                    - url
                    - Base64
            example:
              prompt: ["A cat floating on the clouds"]
              image_style: "Anime"
              orientation: "square"
              output_type: "url"

      responses:
        '200':
          description: Image generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image URL.
                  processing_time:
                    type: integer
                    description: The time taken to process the request (in milliseconds).
                  processing_id:
                    type: string
                    description: Unique request identifier for tracking.
              example:
                image: "https://storage.googleapis.com/example-image-url"
                processing_time: 15938
                processing_id: "1e01b632-2d8f-4f71-8a27-36e219d67be5"

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'

  /api/ai/images/modify/v3:
    post:
      summary: Modify an existing image using AI.
      description: >
        The model is particularly well-tuned for vibrant and accurate colors, with better contrast, lighting, and shadows than its predecessor, all in native 1024x1024 resolution. This removes the need for an additional Upscaling Process after creating an image.
      operationId: imagetoimage
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                existing_image:
                  type: string
                  format: binary
                  description: The existing image to be modified.
                similarity:
                  type: number
                  description: The percentage similarity to maintain with the original image.
                modification:
                  type: string
                  description: The textual description of how the image should be modified.
                output_type:
                  type: string
                  description: The output type of the image to be generated.
                  enum:
                    - url
                    - Base64
                control_function:
                  type: string
                  description: The control function for image modification.
                  enum:
                    - none
                    - structure_transfer
                    - style_transfer
            example:
              similarity: 40
              modification: "Change this into a night scenery"
              output_type: "url"
              control_function: "none"

      responses:
        '200':
          description: Image modified successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image.
                  processing_time:
                    type: number
                    description: The time taken to process the request.
                  processing_id:
                    type: string
                    description: A universally unique identifier for the request.
              example:
                image: "https://storage.googleapis.com/.../modified-image.png"
                processing_time: 15938.768708
                processing_id: "1e01b632-2d8f-4f71-8a27-36e219d67be5"

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'


  /api/ai/images/modify/v3/search-replace-image:
    post:
      summary: Search-Replace Content
      description: >
        Enable creative transformations by identifying and replacing specific objects within an image through a single API call.
      operationId: SearchReplaceContent
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                existing_image:
                  type: string
                  format: binary
                  description: The existing image that contains the object to be replaced.
                search_object:
                  type: string
                  description: The object in the image that you want to replace.
                modification:
                  type: string
                  description: The new object that will replace the existing one.
                output_type:
                  type: string
                  description: The format of the generated image.
                  enum:
                    - url
                    - Base64
            example:
              search_object: cat
              modification: "Change this into a white-colored husky"
              output_type: url
      responses:
        '200':
          description: Image modified successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image URL or Base64 string.
                  processing_time:
                    type: number
                    description: The time taken to process the request.
                  processing_id:
                    type: string
                    description: A unique identifier for the request.
              example:
                image: "https://storage.googleapis.com/.../modified-image.png"
                processing_time: 15938.768708
                processing_id: "1e01b632-2d8f-4f71-8a27-36e219d67be5"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'

  /api/ai/images/modify/v3/recolor-image:
    post:
      summary: Recolor Image
      description: >
        Enable creative transformations by recoloring objects within an image through a single API call.
      operationId: RecolorImage
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                existing_image:
                  type: string
                  format: binary
                  description: The existing image containing the object to be recolored.
                search_object:
                  type: string
                  description: The object in the image that you want to recolor.
                modification:
                  type: string
                  description: The new color or style for the identified object.
                output_type:
                  type: string
                  description: The format of the generated image.
                  enum:
                    - url
                    - Base64
            example:
              search_object: cat
              modification: "Change this into a white-colored husky"
              output_type: url
      responses:
        '200':
          description: Image modified successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image URL or Base64 string.
                  processing_time:
                    type: number
                    description: The time taken to process the request.
                  processing_id:
                    type: string
                    description: A unique identifier for the request.
              example:
                image: "https://storage.googleapis.com/.../modified-image.png"
                processing_time: 15938.768708
                processing_id: "1e01b632-2d8f-4f71-8a27-36e219d67be5"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'

  /api/ai/images/modify/v3/replace-background:
    post:
      summary: Replace Background
      description: >
        Enables creative transformations by replacing the background through a single API call.
      operationId: ReplaceBackground
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                existing_image:
                  type: string
                  format: binary
                  description: The existing image for which the background should be replaced.
                background_image:
                  type: string
                  format: binary
                  description: The image that will be used as the new background.
                modification:
                  type: string
                  description: >
                    A textual description of the desired background scene. Either `modification` or `background_image` must be provided.
                output_type:
                  type: string
                  description: Specifies the format of the output image.
            example:
              existing_image: cat.jpg
              modification: "Change this into a night scenery"
              output_type: "url"
      responses:
        '200':
          description: Image generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image URL.
                  processing_time:
                    type: number
                    description: The time taken to process the request in milliseconds.
                  processing_id:
                    type: string
                    description: A universally unique identifier (UUID) for the request.
              example:
                image: "https://storage.googleapis.com/sample-image.png"
                processing_time: 15938.768708
                processing_id: "1e01b632-2d8f-4f71-8a27-36e219d67be5"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'

  /api/ai/images/modify/v3/remove-background:
    post:
      summary: Remove Image Background
      description: >
        Removes the background from an image, isolating the foreground subject while eliminating the original backdrop.
      operationId: RemoveImgBgd
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                existing_image:
                  type: string
                  format: binary
                  description: The image from which the background will be removed.
                output_type:
                  type: string
                  description: Specifies the format of the output image.
            example:
              existing_image: person.jpg
              output_type: "url"
      responses:
        '200':
          description: Image processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image URL.
                  processing_time:
                    type: number
                    description: The time taken to process the request in milliseconds.
                  processing_id:
                    type: string
                    description: A universally unique identifier (UUID) for the request.
              example:
                image: "https://storage.googleapis.com/sample-removed-bg-image.png"
                processing_time: 10238.123456
                processing_id: "b2a1d5f0-9c67-4a21-995b-5c543a98f7d3"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'



  /api/ai/images/modify/v3/remove-text:
    post:
      summary: Remove Text from Image
      description: >
        This API removes all textual content from an image through a single API call, providing a clean and text-free version of the original image.
      operationId: RemoveText
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                existing_image:
                  type: string
                  format: binary
                  description: The image file from which text will be removed.
                output_type:
                  type: string
                  description: Specifies the output format of the processed image (e.g., URL or base64 encoded image).
            example:
              existing_image: (binary file)
              output_type: url

      responses:
          '200':
            description: Image processed successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    image:
                      type: string
                      description: URL of the processed image.
                    processing_time:
                      type: number
                      description: Time taken to process the request in milliseconds.
                    processing_id:
                      type: string
                      description: A universally unique identifier for the request.
                example:
                  image: "https://example.com/processed-image.png"
                  processing_time: 15938.768708
                  processing_id: "1e01b632-2d8f-4f71-8a27-36e219d67be5"
          '500':
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error500Response'

  /api/ai/images/modify/v3/extend-image:
    post:
      summary: Extend Image Boundaries
      description: >
        This API extends the boundaries of an image by inserting additional content while minimizing artifacts and maintaining the quality of the original image.
      operationId: ExtendImageBoundaries
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                existing_image:
                  type: string
                  format: binary
                  description: The image file to be extended.
                output_type:
                  type: string
                  description: Specifies the output format of the processed image (e.g., URL or base64 encoded image).
                leftExtend:
                  type: integer
                  description: Percentage of the original image width to extend on the left side.
                rightExtend:
                  type: integer
                  description: Percentage of the original image width to extend on the right side.
                topExtend:
                  type: integer
                  description: Percentage of the original image height to extend on the top side.
                bottomExtend:
                  type: integer
                  description: Percentage of the original image height to extend on the bottom side.
                description:
                  type: string
                  description: A description of the background and desired content for the extended image.
            example:
              existing_image: (binary file)
              output_type: url
              leftExtend: 0
              rightExtend: 0
              topExtend: 0
              bottomExtend: 100
              description: "Show a white field"

      responses:
        '200':
          description: Image processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: URL of the processed image.
                  processing_time:
                    type: number
                    description: Time taken to process the request in milliseconds.
                  processing_id:
                    type: string
                    description: A universally unique identifier for the request.
              example:
                image: "https://example.com/processed-image.png"
                processing_time: 15938.768708
                processing_id: "1e01b632-2d8f-4f71-8a27-36e219d67be5"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'   


  /api/ai/images/modify/v3/sketch-image:
    post:
      summary: Convert Sketch to Image
      description: >
        This API converts a sketch into a realistic image, enabling creative and dynamic transformations.
      operationId: SketchToImage
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                existing_image:
                  type: string
                  format: binary
                  description: The sketch image to be transformed.
                description:
                  type: string
                  description: A textual description of the desired output image.
                output_type:
                  type: string
                  description: Specifies the format of the generated image (e.g., URL).
            example:
              output_type: url
              description: "An owl sitting on a branch."
      responses:
        '200':
          description: Image generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image URL.
                  processing_time:
                    type: number
                    description: The time taken to process the request.
                  processing_id:
                    type: string
                    description: A unique identifier for the request.
              example:
                image: "https://example.com/generated-image.png"
                processing_time: 15938.768708
                processing_id: "1e01b632-2d8f-4f71-8a27-36e219d67be5"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'

  /api/ai/images/modify/v3/recreate:
    post:
      summary: Recreate Image
      description: >
        This API recreates an image based on an existing image and description.
      operationId: RecreateImage
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                existing_image:
                  type: string
                  format: binary

                  description: The original image to be recreated.
                description:
                  type: string
                  description: A textual description of modifications or improvements.
                output_type:
                  type: string
                  description: Specifies the format of the generated image (e.g., URL).
            example:
              output_type: url
              description: "An owl sitting on a branch with enhanced details."
      responses:
        '200':
          description: Image generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image URL.
                  processing_time:
                    type: number
                    description: The time taken to process the request.
                  processing_id:
                    type: string
                    description: A unique identifier for the request.
              example:
                image: "https://example.com/recreated-image.png"
                processing_time: 15938.768708
                processing_id: "1e01b632-2d8f-4f71-8a27-36e219d67be5"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
  /api/ai/v2/web-extract:
    post:
      summary: Extract Text from a Web Page
      description: >
        This endpoint is used to extract text from a web page using AI. It can take into account all the features such as metadata, inline code, codeblocks, image & html references and other links as well.
      operationId: extractTextFromWebPageV2
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url_path:
                  type: string
                  description: The URL of the web page to be extracted.
                headline:
                  type: boolean
                  description: Whether to extract the headline of the web page.
                  default: true
                inline_code:
                  type: boolean
                  description: Whether to extract inline code from the web page.
                  default: true
                code_blocks:
                  type: boolean
                  description: Whether to extract code blocks from the web page.
                  default: true
                references:
                  type: boolean
                  description: >
                    Whether to extract references to images and other external links in the web page.
                  default: true
                tables:
                  type: boolean
                  description: Whether to extract tables from the web page.
                  default: true
            example:
              url_path: "https://www.worqhat.com"
              headline: true
              inline_code: true
              code_blocks: true
              references: true
              tables: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status indicating the success of the process.
                  processing_time:
                    type: integer
                    description: The amount of time in miliseconds it took to complete the request.
                  processing_id:
                    type: string
                    description: A unique identifier for the server process. This helps us track support requests and complaints.
                  processing_count:
                    type: integer
                    description: Usage statistics for the request. This is what is used for the billing.
                  data:
                    type: object
                    properties:
                      text_content:
                        type: string
                        description: The extracted text content.
                      tags:
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                              description: The name of the tag.
                            value:
                              type: string
                              description: The value associated with the tag.
                            data:
                             type: object
                             description: The extracted data from the web page.
                             properties:
                              content:
                               type: string
                               description: Extracted text content from the web page.
                              markdown:
                               type: string
                               description: Extracted text formatted in markdown.
                              linksOnPage:
                                type: array
                                items:
                                 type: string
                                description: List of links extracted from the web page.
                              metadata:
                                type: object
                                description: Additional metadata extracted from the web page.
              example:
                status: "success"
                processingTime: 888
                processingId: "4b139bfe-1f71-4345-b539-fa6c1700f166"
                processingCount: 12
                data:
                  content: "Extracted text from the web page..."
                  markdown: "# Extracted Title\nExtracted text from the web page..."
                  linksOnPage:
                    - "https://www.example.com/link1"
                    - "https://www.example.com/link2"
                  metadata:
                    author: "John Doe"
                    publish_date: "2023-01-01"

  /api/ai/v2/pdf-extract:
    post:
      summary: Extract Text from a PDF
      description: >
        This endpoint is used to extract text from a PDF using AI. Scanning simultaneously across all pages and with the capability to understand human handwriting, this endpoint can extract text from any PDF.
      operationId: extractTextFromPDFV2
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The PDF file to be extracted.
              required:
                - file
            example:
              file: "/path/to/pdf.pdf"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status indicating the success of the PDF Extraction Process
                  processing_time:
                    type: integer
                    description: The amount of time in miliseconds it took to complete the request.
                  processing_id:
                    type: string
                    description: A unique identifier for the server process. This helps us track support requests and complaints.
                  processing_count:
                    type: integer
                    description: Usage statistics for the request. This is what is used for the billing.
                  data:
                    type: string
                    description: The extracted text content.
              example:
                  status: "success"
                  data: "This is a sample text to be converted."
                  processing_time: 888
                  processing_id: "4b139bfe-1f71-4345-b539-fa6c1700f166"
                  processing_count: 12

  /api/ai/speech-text:
    post:
      summary: Convert Speech to Text using AI
      description: >
        This endpoint is used to convert speech to text using AI. It accepts a Form Data containing the audio file and returns the speech-to-text conversion results.
      operationId: speechToText
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                audio:
                  type: string
                  format: binary
                  description: The audio file to be sent as input. The audio file can be of any format.
              required:
                - audio
            example:
              audio: "/path/to/audio.mp3"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status indicating the success of the Audio Conversion Process.
                  data:
                    type: object
                    properties:
                      text:
                        type: string
                        description: The Extracted Text from the Audio.
                      speaker_labels:
                        type: array
                        items:
                          type: object
                          properties:
                            speaker:
                              type: string
                              description: The speaker label.
                            text:
                              type: string
                              description: The text associated with the speaker.
                  processing_time:
                    type: integer
                    description: The amount of time in miliseconds it took to complete the request.
                  processing_id:
                    type: string
                    description: A unique identifier for the server process. This helps us track support requests and complaints.
                  processing_count:
                    type: integer
                    description: Usage statistics for the request. This is what is used for the billing.
              example:
                status: "success"
                data:
                  text: "This is a sample text to be converted to speech."
                  speaker_labels:
                    - speaker: "A"
                      text: "This is a sample text to be converted to speech."
                processing_time: 888
                processing_id: "4b139bfe-1f71-4345-b539-fa6c1700f166"
                processing_count: 12
  /api/ai/moderation:
    post:
      summary: Moderate Text Content using AI
      description: >
        This endpoint is used to moderate text content using AI.
        It accepts a JSON object containing the text moderation parameters and returns moderation results.
      operationId: moderateText
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text_content:
                  type: string
                  description: The text to be moderated.
            example:
              text_content: "This is a sample text to be moderated."
      responses:
        '200':
          description: Text moderated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status indicating the success of the text moderation.
                  moderation:
                    type: object
                    properties:
                      sexual:
                        type: string
                      hate:
                        type: string
                      harassment:
                        type: string
                      self-harm:
                        type: string
                      sexual/minors:
                        type: string
                      hate/threatening:
                        type: string
                      violence/graphic:
                        type: string
                      self-harm/intent:
                        type: string
                      self-harm/instructions:
                        type: string
                      harassment/threatening:
                        type: string
                      violence:
                        type: string
                    description: The moderation results.
                  processing_time:
                    type: integer
                    description: The amount of time in miliseconds it took to complete the request.
                  processing_id:
                    type: string
                    description: A unique identifier for the server process. This helps us track support requests and complaints.
                  processing_count:
                    type: integer
                    description: Usage statistics for the request. This is what is used for the billing.
                example:
                  status: "success"
                  moderation:
                    sexual: "0.016973"
                    hate: "0.001243"
                    harassment: "0.012784"
                    self-harm: "0.000040"
                    sexual/minors: "0.000049"
                    hate/threatening: "0.000002"
                    violence/graphic: "0.000016"
                    self-harm/intent: "0.000059"
                    self-harm/instructions: "0.000007"
                    harassment/threatening: "0.000002"
                    violence: "0.000333"
                  processing_time: 888
                  processing_id: "4b139bfe-1f71-4345-b539-fa6c1700f166"
                  processing_count: 3
  /api/ai/images/v2/image-moderation:
    post:
      summary: Moderate an Image using AI
      description: >
        This endpoint is used to moderate an image using AI.
        It accepts a Form Data containing the image and returns the moderation results.
      operationId: moderateImageV2
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: The image to be sent as input.
            example:
              image: "/path/to/image.jpg"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - processingTime
                  - processingId
                  - processingCount
                properties:
                  data:
                    type: array
                    minItems: 1
                    items:
                      type: object
                      required:
                        - Confidence
                        - Name
                        - ParentName
                        - TaxonomyLevel
                      properties:
                        Confidence:
                          type: number
                        Name:
                          type: string
                        ParentName:
                          type: string
                        TaxonomyLevel:
                          type: integer
                  processingTime:
                    type: number
                    description: The amount of time in miliseconds it took to complete the request.
                  processingId:
                    type: string
                    description: A unique identifier for the server process. This helps us track support requests and complaints.
                  processingCount:
                    type: integer
                    description: Usage statistics for the request. This is what is used for the billing.
                example:
                  summary: Example response with moderation data
                  value:
                    data:
                     - Confidence: 85.734561
                       Name: Explicit Nudity
                       ParentName: Adult Content
                       TaxonomyLevel: 3
                    processingTime: 888
                    processingId: "4b139bfe-1f71-4345-b539-fa6c1700f166"
                    processingCount: 3
  /api/ai/train-data:
    post:
      summary: Train AI Model
      description: >
        This endpoint allows users to train custom AI models for search and content processing. Users can upload files, specify model parameters, and initiate training for different model versions.
      operationId: trainAIModel
      tags:
        - AI Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: string
                  format: binary
                  description: The file to be used for training the model.
                type:
                  type: string
                  enum: [search, content]
                  description: The type of model training.
                modelType:
                  type: string
                  enum: [v2, v3]
                  description: The version of the model to be trained.
                name:
                  type: string
                  description: The name of the model to identify it later.
                modelId:
                  type: string
                  description: Custom model ID for retraining an existing model.
              required:
                - files
                - type
                - modelType
                - name
            example:
              files: "/path/to/Pitch Deck July 2024.pdf"
              type: "search"
              modelType: "v3"
              name: "Some name"
              modelId: "sample id"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status indicating the success of the model training.
                  processing_time:
                    type: integer
                    description: The amount of time in miliseconds it took to complete the request.
                  processing_id:
                    type: string
                    description: A unique identifier for the server process. This helps us track support requests and complaints.
                  processing_count:
                    type: integer
                    description: Usage statistics for the request. This is what is used for the billing.
                  data:
                    type: string
                    description: Model training results.
              example:
                status: "success"
                processing_time: 888
                processing_id: "4b139bfe-1f71-4345-b539-fa6c1700f166"
                processing_count: 3
                data: "The AI model training process has been successfully initiated."

  